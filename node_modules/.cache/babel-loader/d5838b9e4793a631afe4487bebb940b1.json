{"ast":null,"code":"import _slicedToArray from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/craigcronin/Development/applestooapples_web_template/src/layouts/DashboardLayout/TopBar/Contacts.js\";\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport moment from 'moment';\nimport { Avatar, Box, IconButton, Link, List, ListItem, ListItemAvatar, ListItemText, Popover, SvgIcon, Tooltip, Typography, makeStyles } from '@material-ui/core';\nimport { Users as UsersIcon } from 'react-feather';\nimport { useDispatch, useSelector } from 'src/store';\nimport { getContacts } from 'src/slices/chat';\nimport OnlineIndicator from 'src/components/OnlineIndicator';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    popover: {\n      width: 320,\n      padding: theme.spacing(2)\n    },\n    list: {\n      padding: theme.spacing(1, 3)\n    },\n    listItemText: {\n      marginRight: theme.spacing(1)\n    },\n    lastActivity: {\n      whiteSpace: 'nowrap'\n    }\n  };\n});\n\nvar Contacts = function Contacts() {\n  var classes = useStyles();\n  var ref = useRef(null);\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.chat;\n  }),\n      contacts = _useSelector.contacts;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setOpen = _useState2[1];\n\n  var handleOpen = function handleOpen() {\n    setOpen(true);\n  };\n\n  var handleClose = function handleClose() {\n    setOpen(false);\n  };\n\n  useEffect(function () {\n    dispatch(getContacts());\n  }, [dispatch]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Contacts\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    color: \"inherit\",\n    onClick: handleOpen,\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SvgIcon, {\n    fontSize: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(UsersIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(Popover, {\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    classes: {\n      paper: classes.popover\n    },\n    anchorEl: ref.current,\n    onClose: handleClose,\n    open: isOpen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    color: \"textPrimary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"Contacts\"), /*#__PURE__*/React.createElement(Box, {\n    mt: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    disablePadding: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, contacts.allIds.map(function (contactId) {\n    var contact = contacts.byId[contactId];\n    return /*#__PURE__*/React.createElement(ListItem, {\n      disableGutters: true,\n      key: contact.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListItemAvatar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Avatar, {\n      alt: \"Person\",\n      src: contact.avatar,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(ListItemText, {\n      className: classes.listItemText,\n      disableTypography: true,\n      primary: /*#__PURE__*/React.createElement(Link, {\n        color: \"textPrimary\",\n        component: RouterLink,\n        display: \"block\",\n        underline: \"none\",\n        noWrap: true,\n        to: \"#\",\n        variant: \"h6\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 23\n        }\n      }, contact.name),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 19\n      }\n    }), contact.isActive ? /*#__PURE__*/React.createElement(OnlineIndicator, {\n      size: \"small\",\n      status: \"online\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }\n    }) : /*#__PURE__*/React.createElement(Typography, {\n      color: \"textSecondary\",\n      noWrap: true,\n      variant: \"caption\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }\n    }, moment(contact.lastActivity).fromNow()));\n  })))));\n};\n\nexport default Contacts;","map":{"version":3,"sources":["/Users/craigcronin/Development/applestooapples_web_template/src/layouts/DashboardLayout/TopBar/Contacts.js"],"names":["React","useRef","useState","useEffect","Link","RouterLink","moment","Avatar","Box","IconButton","List","ListItem","ListItemAvatar","ListItemText","Popover","SvgIcon","Tooltip","Typography","makeStyles","Users","UsersIcon","useDispatch","useSelector","getContacts","OnlineIndicator","useStyles","theme","popover","width","padding","spacing","list","listItemText","marginRight","lastActivity","whiteSpace","Contacts","classes","ref","dispatch","state","chat","contacts","isOpen","setOpen","handleOpen","handleClose","vertical","horizontal","paper","current","allIds","map","contactId","contact","byId","id","avatar","name","isActive","fromNow"],"mappings":"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","sourcesContent":["import React, {\n  useRef,\n  useState,\n  useEffect\n} from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport moment from 'moment';\nimport {\n  Avatar,\n  Box,\n  IconButton,\n  Link,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Popover,\n  SvgIcon,\n  Tooltip,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport { Users as UsersIcon } from 'react-feather';\nimport { useDispatch, useSelector } from 'src/store';\nimport { getContacts } from 'src/slices/chat';\nimport OnlineIndicator from 'src/components/OnlineIndicator';\n\nconst useStyles = makeStyles((theme) => ({\n  popover: {\n    width: 320,\n    padding: theme.spacing(2)\n  },\n  list: {\n    padding: theme.spacing(1, 3)\n  },\n  listItemText: {\n    marginRight: theme.spacing(1)\n  },\n  lastActivity: {\n    whiteSpace: 'nowrap'\n  }\n}));\n\nconst Contacts = () => {\n  const classes = useStyles();\n  const ref = useRef(null);\n  const dispatch = useDispatch();\n  const { contacts } = useSelector((state) => state.chat);\n  const [isOpen, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Tooltip title=\"Contacts\">\n        <IconButton\n          color=\"inherit\"\n          onClick={handleOpen}\n          ref={ref}\n        >\n          <SvgIcon fontSize=\"small\">\n            <UsersIcon />\n          </SvgIcon>\n        </IconButton>\n      </Tooltip>\n      <Popover\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center'\n        }}\n        classes={{ paper: classes.popover }}\n        anchorEl={ref.current}\n        onClose={handleClose}\n        open={isOpen}\n      >\n\n        <Typography\n          variant=\"h4\"\n          color=\"textPrimary\"\n        >\n          Contacts\n        </Typography>\n        <Box mt={2}>\n          <List disablePadding>\n            {contacts.allIds.map((contactId) => {\n              const contact = contacts.byId[contactId];\n\n              return (\n                <ListItem\n                  disableGutters\n                  key={contact.id}\n                >\n                  <ListItemAvatar>\n                    <Avatar\n                      alt=\"Person\"\n                      src={contact.avatar}\n                    />\n                  </ListItemAvatar>\n                  <ListItemText\n                    className={classes.listItemText}\n                    disableTypography\n                    primary={(\n                      <Link\n                        color=\"textPrimary\"\n                        component={RouterLink}\n                        display=\"block\"\n                        underline=\"none\"\n                        noWrap\n                        to=\"#\"\n                        variant=\"h6\"\n                      >\n                        {contact.name}\n                      </Link>\n                    )}\n                  />\n                  {contact.isActive ? (\n                    <OnlineIndicator\n                      size=\"small\"\n                      status=\"online\"\n                    />\n                  ) : (\n                    <Typography\n                      color=\"textSecondary\"\n                      noWrap\n                      variant=\"caption\"\n                    >\n                      {moment(contact.lastActivity).fromNow()}\n                    </Typography>\n                  )}\n                </ListItem>\n              );\n            })}\n          </List>\n        </Box>\n      </Popover>\n    </>\n  );\n};\n\nexport default Contacts;\n"]},"metadata":{},"sourceType":"module"}