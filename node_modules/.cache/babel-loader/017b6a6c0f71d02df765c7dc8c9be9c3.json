{"ast":null,"code":"import _extends from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/craigcronin/Development/applestooapples_web_template/src/views/chat/ChatView/RecentThreads/ThreadList.js\";\n\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { List, makeStyles } from '@material-ui/core';\nimport { useSelector } from 'src/store';\nimport ThreadItem from './ThreadItem';\nvar useStyles = makeStyles(function () {\n  return {\n    root: {}\n  };\n});\n\nvar ThreadList = function ThreadList(_ref) {\n  var className = _ref.className,\n      rest = _objectWithoutProperties(_ref, [\"className\"]);\n\n  var classes = useStyles();\n\n  var _useSelector = useSelector(function (state) {\n    return state.chat;\n  }),\n      threads = _useSelector.threads,\n      activeThreadId = _useSelector.activeThreadId;\n\n  var history = useHistory();\n\n  var handleSelect = function handleSelect(threadId) {\n    var thread = threads.byId[threadId];\n    var threadKey = '';\n\n    if (thread.type === 'GROUP') {\n      threadKey = thread.id;\n    } else {\n      // We hardcode the current user ID because the mocked that is not in sync with the auth provider.\n      // When implementing this app with a real database, replace this ID with the ID from Auth Context.\n      var otherParticipant = thread.participants.find(function (participant) {\n        return participant.id !== '5e86809283e28b96d2d38537';\n      });\n      threadKey = otherParticipant.username;\n    }\n\n    history.push(\"/app/chat/\".concat(threadKey));\n  };\n\n  return /*#__PURE__*/React.createElement(List, _extends({\n    className: clsx(classes.root, className)\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }), threads.allIds.map(function (threadId) {\n    return /*#__PURE__*/React.createElement(ThreadItem, {\n      active: activeThreadId === threadId,\n      key: threadId,\n      onSelect: function onSelect() {\n        return handleSelect(threadId);\n      },\n      thread: threads.byId[threadId],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    });\n  }));\n};\n\nThreadList.propTypes = {\n  className: PropTypes.string\n};\nexport default ThreadList;","map":{"version":3,"sources":["/Users/craigcronin/Development/applestooapples_web_template/src/views/chat/ChatView/RecentThreads/ThreadList.js"],"names":["React","useHistory","clsx","PropTypes","List","makeStyles","useSelector","ThreadItem","useStyles","root","ThreadList","className","rest","classes","state","chat","threads","activeThreadId","history","handleSelect","threadId","thread","byId","threadKey","type","id","otherParticipant","participants","find","participant","username","push","allIds","map","propTypes","string"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,mBAAjC;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,IAAMC,SAAS,GAAGH,UAAU,CAAC;AAAA,SAAO;AAClCI,IAAAA,IAAI,EAAE;AAD4B,GAAP;AAAA,CAAD,CAA5B;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAA4B;AAAA,MAAzBC,SAAyB,QAAzBA,SAAyB;AAAA,MAAXC,IAAW;;AAC7C,MAAMC,OAAO,GAAGL,SAAS,EAAzB;;AAD6C,qBAETF,WAAW,CAAC,UAACQ,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAFF;AAAA,MAErCC,OAFqC,gBAErCA,OAFqC;AAAA,MAE5BC,cAF4B,gBAE5BA,cAF4B;;AAG7C,MAAMC,OAAO,GAAGjB,UAAU,EAA1B;;AAEA,MAAMkB,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAc;AACjC,QAAMC,MAAM,GAAGL,OAAO,CAACM,IAAR,CAAaF,QAAb,CAAf;AACA,QAAIG,SAAS,GAAG,EAAhB;;AAEA,QAAIF,MAAM,CAACG,IAAP,KAAgB,OAApB,EAA6B;AAC3BD,MAAAA,SAAS,GAAGF,MAAM,CAACI,EAAnB;AACD,KAFD,MAEO;AACL;AACA;AACA,UAAMC,gBAAgB,GAAGL,MAAM,CAACM,YAAP,CAAoBC,IAApB,CAAyB,UAACC,WAAD;AAAA,eAAiBA,WAAW,CAACJ,EAAZ,KAAmB,0BAApC;AAAA,OAAzB,CAAzB;AAEAF,MAAAA,SAAS,GAAGG,gBAAgB,CAACI,QAA7B;AACD;;AAEDZ,IAAAA,OAAO,CAACa,IAAR,qBAA0BR,SAA1B;AACD,GAfD;;AAiBA,sBACE,oBAAC,IAAD;AACE,IAAA,SAAS,EAAErB,IAAI,CAACW,OAAO,CAACJ,IAAT,EAAeE,SAAf;AADjB,KAEMC,IAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIGI,OAAO,CAACgB,MAAR,CAAeC,GAAf,CAAmB,UAACb,QAAD;AAAA,wBAClB,oBAAC,UAAD;AACE,MAAA,MAAM,EAAEH,cAAc,KAAKG,QAD7B;AAEE,MAAA,GAAG,EAAEA,QAFP;AAGE,MAAA,QAAQ,EAAE;AAAA,eAAMD,YAAY,CAACC,QAAD,CAAlB;AAAA,OAHZ;AAIE,MAAA,MAAM,EAAEJ,OAAO,CAACM,IAAR,CAAaF,QAAb,CAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADkB;AAAA,GAAnB,CAJH,CADF;AAeD,CArCD;;AAuCAV,UAAU,CAACwB,SAAX,GAAuB;AACrBvB,EAAAA,SAAS,EAAER,SAAS,CAACgC;AADA,CAAvB;AAIA,eAAezB,UAAf","sourcesContent":["import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { List, makeStyles } from '@material-ui/core';\nimport { useSelector } from 'src/store';\nimport ThreadItem from './ThreadItem';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst ThreadList = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const { threads, activeThreadId } = useSelector((state) => state.chat);\n  const history = useHistory();\n\n  const handleSelect = (threadId) => {\n    const thread = threads.byId[threadId];\n    let threadKey = '';\n\n    if (thread.type === 'GROUP') {\n      threadKey = thread.id;\n    } else {\n      // We hardcode the current user ID because the mocked that is not in sync with the auth provider.\n      // When implementing this app with a real database, replace this ID with the ID from Auth Context.\n      const otherParticipant = thread.participants.find((participant) => participant.id !== '5e86809283e28b96d2d38537');\n\n      threadKey = otherParticipant.username;\n    }\n\n    history.push(`/app/chat/${threadKey}`);\n  };\n\n  return (\n    <List\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      {threads.allIds.map((threadId) => (\n        <ThreadItem\n          active={activeThreadId === threadId}\n          key={threadId}\n          onSelect={() => handleSelect(threadId)}\n          thread={threads.byId[threadId]}\n        />\n      ))}\n    </List>\n  );\n};\n\nThreadList.propTypes = {\n  className: PropTypes.string\n};\n\nexport default ThreadList;\n"]},"metadata":{},"sourceType":"module"}