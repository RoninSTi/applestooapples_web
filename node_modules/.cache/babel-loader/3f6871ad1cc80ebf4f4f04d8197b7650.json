{"ast":null,"code":"import _regeneratorRuntime from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createSlice } from '@reduxjs/toolkit';\nimport axios from 'src/utils/axios';\nimport objFromArray from 'src/utils/objFromArray';\nvar initialState = {\n  activeThreadId: null,\n  contacts: {\n    byId: {},\n    allIds: []\n  },\n  threads: {\n    byId: {},\n    allIds: []\n  },\n  participants: [],\n  recipients: []\n};\nvar slice = createSlice({\n  name: 'chat',\n  initialState: initialState,\n  reducers: {\n    getContacts: function getContacts(state, action) {\n      var contacts = action.payload.contacts;\n      state.contacts.byId = objFromArray(contacts);\n      state.contacts.allIds = Object.keys(state.contacts.byId);\n    },\n    getThreads: function getThreads(state, action) {\n      var threads = action.payload.threads;\n      state.threads.byId = objFromArray(threads);\n      state.threads.allIds = Object.keys(state.threads.byId);\n    },\n    getThread: function getThread(state, action) {\n      var thread = action.payload.thread;\n\n      if (thread) {\n        state.threads.byId[thread.id] = thread;\n        state.activeThreadId = thread.id;\n\n        if (!state.threads.allIds.includes(thread.id)) {\n          state.threads.allIds.push(thread.id);\n        }\n      } else {\n        state.activeThreadId = null;\n      }\n    },\n    markThreadAsSeen: function markThreadAsSeen(state, action) {\n      var threadId = action.payload.threadId;\n      var thread = state.threads.byId[threadId];\n\n      if (thread) {\n        thread.unreadCount = 0;\n      }\n    },\n    resetActiveThread: function resetActiveThread(state) {\n      state.activeThreadId = null;\n    },\n    getParticipants: function getParticipants(state, action) {\n      var participants = action.payload.participants;\n      state.participants = participants;\n    },\n    addRecipient: function addRecipient(state, action) {\n      var recipient = action.payload.recipient;\n      var exists = state.recipients.find(function (_recipient) {\n        return _recipient.id === recipient.id;\n      });\n\n      if (!exists) {\n        state.recipients.push(recipient);\n      }\n    },\n    removeRecipient: function removeRecipient(state, action) {\n      var recipientId = action.payload.recipientId;\n      state.recipients = state.recipients.filter(function (recipient) {\n        return recipient.id !== recipientId;\n      });\n    }\n  }\n});\nexport var reducer = slice.reducer;\nexport var getContacts = function getContacts() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios.get('/api/chat/contacts');\n\n            case 2:\n              response = _context.sent;\n              dispatch(slice.actions.getContacts(response.data));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var getThreads = function getThreads() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return axios.get('/api/chat/threads');\n\n            case 2:\n              response = _context2.sent;\n              dispatch(slice.actions.getThreads(response.data));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var getThread = function getThread(threadKey) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return axios.get('/api/chat/thread', {\n                params: {\n                  threadKey: threadKey\n                }\n              });\n\n            case 2:\n              response = _context3.sent;\n              dispatch(slice.actions.getThread(response.data));\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport var markThreadAsSeen = function markThreadAsSeen(threadId) {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return axios.get('/api/chat/thread/mark-as-seen', {\n                params: {\n                  threadId: threadId\n                }\n              });\n\n            case 2:\n              dispatch(slice.actions.markThreadAsSeen({\n                threadId: threadId\n              }));\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\nexport var resetActiveThread = function resetActiveThread() {\n  return function (dispatch) {\n    dispatch(slice.actions.resetActiveThread());\n  };\n};\nexport var getParticipants = function getParticipants(threadKey) {\n  return /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return axios.get('/api/chat/participants', {\n                params: {\n                  threadKey: threadKey\n                }\n              });\n\n            case 2:\n              response = _context5.sent;\n              dispatch(slice.actions.getParticipants(response.data));\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n};\nexport var addRecipient = function addRecipient(recipient) {\n  return function (dispatch) {\n    dispatch(slice.actions.addRecipient({\n      recipient: recipient\n    }));\n  };\n};\nexport var removeRecipient = function removeRecipient(recipientId) {\n  return function (dispatch) {\n    dispatch(slice.actions.removeRecipient({\n      recipientId: recipientId\n    }));\n  };\n};\nexport default slice;","map":{"version":3,"sources":["/Users/craigcronin/Development/applestooapples_web_template/src/slices/chat.js"],"names":["createSlice","axios","objFromArray","initialState","activeThreadId","contacts","byId","allIds","threads","participants","recipients","slice","name","reducers","getContacts","state","action","payload","Object","keys","getThreads","getThread","thread","id","includes","push","markThreadAsSeen","threadId","unreadCount","resetActiveThread","getParticipants","addRecipient","recipient","exists","find","_recipient","removeRecipient","recipientId","filter","reducer","dispatch","get","response","actions","data","threadKey","params"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'src/utils/axios';\nimport objFromArray from 'src/utils/objFromArray';\n\nconst initialState = {\n  activeThreadId: null,\n  contacts: {\n    byId: {},\n    allIds: []\n  },\n  threads: {\n    byId: {},\n    allIds: []\n  },\n  participants: [],\n  recipients: []\n};\n\nconst slice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    getContacts(state, action) {\n      const { contacts } = action.payload;\n\n      state.contacts.byId = objFromArray(contacts);\n      state.contacts.allIds = Object.keys(state.contacts.byId);\n    },\n    getThreads(state, action) {\n      const { threads } = action.payload;\n\n      state.threads.byId = objFromArray(threads);\n      state.threads.allIds = Object.keys(state.threads.byId);\n    },\n    getThread(state, action) {\n      const { thread } = action.payload;\n\n      if (thread) {\n        state.threads.byId[thread.id] = thread;\n        state.activeThreadId = thread.id;\n  \n        if (!state.threads.allIds.includes(thread.id)) {\n          state.threads.allIds.push(thread.id);\n        }\n      } else {\n        state.activeThreadId = null;\n      }\n    },\n    markThreadAsSeen(state, action) {\n      const { threadId } = action.payload;\n      const thread = state.threads.byId[threadId];\n\n      if (thread) {\n        thread.unreadCount = 0;\n      }\n    },\n    resetActiveThread(state) {\n      state.activeThreadId = null;\n    },\n    getParticipants(state, action) {\n      const { participants } = action.payload;\n\n      state.participants = participants;\n    },\n    addRecipient(state, action) {\n      const { recipient } = action.payload;\n      const exists = state.recipients.find((_recipient) => _recipient.id === recipient.id);\n\n      if (!exists) {\n        state.recipients.push(recipient);\n      }\n    },\n    removeRecipient(state, action) {\n      const { recipientId } = action.payload;\n\n      state.recipients = state.recipients.filter((recipient) => recipient.id !== recipientId);\n    }\n  }\n});\n\nexport const reducer = slice.reducer;\n\nexport const getContacts = () => async (dispatch) => {\n  const response = await axios.get('/api/chat/contacts');\n\n  dispatch(slice.actions.getContacts(response.data));\n};\n\nexport const getThreads = () => async (dispatch) => {\n  const response = await axios.get('/api/chat/threads');\n\n  dispatch(slice.actions.getThreads(response.data));\n};\n\nexport const getThread = (threadKey) => async (dispatch) => {\n  const response = await axios.get('/api/chat/thread', {\n    params: {\n      threadKey\n    }\n  });\n\n  dispatch(slice.actions.getThread(response.data));\n};\n\nexport const markThreadAsSeen = (threadId) => async (dispatch) => {\n  await axios.get('/api/chat/thread/mark-as-seen', {\n    params: {\n      threadId\n    }\n  });\n\n  dispatch(slice.actions.markThreadAsSeen({ threadId }));\n};\n\nexport const resetActiveThread = () => (dispatch) => {\n  dispatch(slice.actions.resetActiveThread());\n};\n\nexport const getParticipants = (threadKey) => async (dispatch) => {\n  const response = await axios.get('/api/chat/participants', {\n    params: {\n      threadKey\n    }\n  });\n\n  dispatch(slice.actions.getParticipants(response.data));\n};\n\nexport const addRecipient = (recipient) => (dispatch) => {\n  dispatch(slice.actions.addRecipient({ recipient }));\n};\n\nexport const removeRecipient = (recipientId) => (dispatch) => {\n  dispatch(slice.actions.removeRecipient({ recipientId }));\n};\n\nexport default slice;\n"]},"metadata":{},"sourceType":"module"}