{"ast":null,"code":"import _toConsumableArray from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/craigcronin/Development/applestooapples_web_template/src/views/mail/MailView/MailList/index.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Divider, makeStyles } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'src/store';\nimport { getMails } from 'src/slices/mail';\nimport Toolbar from './Toolbar';\nimport MailItem from './MailItem';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1,\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.dark\n    }\n  };\n});\n\nvar MailList = function MailList() {\n  var classes = useStyles();\n  var params = useParams();\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.mail;\n  }),\n      mails = _useSelector.mails;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedMails = _useState2[0],\n      setSelectedMails = _useState2[1];\n\n  var handleSelectAllMails = function handleSelectAllMails() {\n    setSelectedMails(mails.allIds.map(function (mailId) {\n      return mailId;\n    }));\n  };\n\n  var handleDeselectAllMails = function handleDeselectAllMails() {\n    setSelectedMails([]);\n  };\n\n  var handleSelectOneMail = function handleSelectOneMail(mailId) {\n    setSelectedMails(function (prevSelectedMails) {\n      if (!prevSelectedMails.includes(mailId)) {\n        return [].concat(_toConsumableArray(prevSelectedMails), [mailId]);\n      }\n\n      return prevSelectedMails;\n    });\n  };\n\n  var handleDeselectOneMail = function handleDeselectOneMail(mailId) {\n    setSelectedMails(function (prevSelectedMails) {\n      return prevSelectedMails.filter(function (id) {\n        return id !== mailId;\n      });\n    });\n  };\n\n  useEffect(function () {\n    dispatch(getMails(params));\n  }, [dispatch, params]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    onDeselectAll: handleDeselectAllMails,\n    onSelectAll: handleSelectAllMails,\n    selectedMails: selectedMails.length,\n    mails: mails.allIds.length,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), mails.allIds.map(function (mailId) {\n    return /*#__PURE__*/React.createElement(MailItem, {\n      mail: mails.byId[mailId],\n      key: mailId,\n      onDeselect: function onDeselect() {\n        return handleDeselectOneMail(mailId);\n      },\n      onSelect: function onSelect() {\n        return handleSelectOneMail(mailId);\n      },\n      selected: selectedMails.includes(mailId),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    });\n  }));\n};\n\nexport default MailList;","map":{"version":3,"sources":["/Users/craigcronin/Development/applestooapples_web_template/src/views/mail/MailView/MailList/index.js"],"names":["React","useState","useEffect","useParams","Divider","makeStyles","useDispatch","useSelector","getMails","Toolbar","MailItem","useStyles","theme","root","flexGrow","overflow","backgroundColor","palette","background","dark","MailList","classes","params","dispatch","state","mail","mails","selectedMails","setSelectedMails","handleSelectAllMails","allIds","map","mailId","handleDeselectAllMails","handleSelectOneMail","prevSelectedMails","includes","handleDeselectOneMail","filter","id","length","byId"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useEffect\n} from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Divider, makeStyles } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'src/store';\nimport { getMails } from 'src/slices/mail';\nimport Toolbar from './Toolbar';\nimport MailItem from './MailItem';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.dark\n  }\n}));\n\nconst MailList = () => {\n  const classes = useStyles();\n  const params = useParams();\n  const dispatch = useDispatch();\n  const { mails } = useSelector((state) => state.mail);\n  const [selectedMails, setSelectedMails] = useState([]);\n\n  const handleSelectAllMails = () => {\n    setSelectedMails(mails.allIds.map((mailId => mailId)));\n  };\n\n  const handleDeselectAllMails = () => {\n    setSelectedMails([]);\n  };\n\n  const handleSelectOneMail = (mailId) => {\n    setSelectedMails((prevSelectedMails) => {\n      if (!prevSelectedMails.includes(mailId)) {\n        return [...prevSelectedMails, mailId];\n      }\n\n      return prevSelectedMails;\n    });\n  };\n\n  const handleDeselectOneMail = (mailId) => {\n    setSelectedMails((prevSelectedMails) => prevSelectedMails.filter((id) => id !== mailId));\n  };\n\n  useEffect(() => {\n    dispatch(getMails(params));\n  }, [dispatch, params]);\n\n  return (\n    <div className={classes.root}>\n      <Toolbar\n        onDeselectAll={handleDeselectAllMails}\n        onSelectAll={handleSelectAllMails}\n        selectedMails={selectedMails.length}\n        mails={mails.allIds.length}\n      />\n      <Divider />\n      {mails.allIds.map((mailId) => (\n        <MailItem\n          mail={mails.byId[mailId]}\n          key={mailId}\n          onDeselect={() => handleDeselectOneMail(mailId)}\n          onSelect={() => handleSelectOneMail(mailId)}\n          selected={selectedMails.includes(mailId)}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default MailList;\n"]},"metadata":{},"sourceType":"module"}