{"ast":null,"code":"import _extends from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/craigcronin/Development/applestooapples_web_template/src/views/account/AccountView/General/GeneralSettings.js\";\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport { Box, Button, Card, CardContent, CardHeader, Divider, FormHelperText, Grid, Switch, TextField, Typography, makeStyles } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport wait from 'src/utils/wait';\nimport countries from './countries';\nvar useStyles = makeStyles(function () {\n  return {\n    root: {}\n  };\n});\n\nvar GeneralSettings = function GeneralSettings(_ref) {\n  var className = _ref.className,\n      user = _ref.user,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"user\"]);\n\n  var classes = useStyles();\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar;\n\n  return /*#__PURE__*/React.createElement(Formik, {\n    enableReinitialize: true,\n    initialValues: {\n      canHire: user.canHire || false,\n      city: user.city || '',\n      country: user.country || '',\n      email: user.email || '',\n      isPublic: user.isPublic || false,\n      name: user.name || '',\n      phone: user.phone || '',\n      state: user.state || '',\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      canHire: Yup.bool(),\n      city: Yup.string().max(255),\n      country: Yup.string().max(255),\n      email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n      isPublic: Yup.bool(),\n      name: Yup.string().max(255).required('Name is required'),\n      phone: Yup.string(),\n      state: Yup.string()\n    }),\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var resetForm, setErrors, setStatus, setSubmitting;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resetForm = _ref2.resetForm, setErrors = _ref2.setErrors, setStatus = _ref2.setStatus, setSubmitting = _ref2.setSubmitting;\n                _context.prev = 1;\n                _context.next = 4;\n                return wait(200);\n\n              case 4:\n                resetForm();\n                setStatus({\n                  success: true\n                });\n                setSubmitting(false);\n                enqueueSnackbar('Profile updated', {\n                  variant: 'success'\n                });\n                _context.next = 16;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                console.error(_context.t0);\n                setStatus({\n                  success: false\n                });\n                setErrors({\n                  submit: _context.t0.message\n                });\n                setSubmitting(false);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 10]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, function (_ref4) {\n    var errors = _ref4.errors,\n        handleBlur = _ref4.handleBlur,\n        handleChange = _ref4.handleChange,\n        handleSubmit = _ref4.handleSubmit,\n        isSubmitting = _ref4.isSubmitting,\n        touched = _ref4.touched,\n        values = _ref4.values;\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card, _extends({\n      className: clsx(classes.root, className)\n    }, rest, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(CardHeader, {\n      title: \"Profile\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Divider, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(CardContent, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.name && errors.name),\n      fullWidth: true,\n      helperText: touched.name && errors.name,\n      label: \"Name\",\n      name: \"name\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.name,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.email && errors.email),\n      fullWidth: true,\n      helperText: touched.email && errors.email ? errors.email : 'We will use this email to contact you',\n      label: \"Email Address\",\n      name: \"email\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      required: true,\n      type: \"email\",\n      value: values.email,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.phone && errors.phone),\n      fullWidth: true,\n      helperText: touched.phone && errors.phone,\n      label: \"Phone Number\",\n      name: \"phone\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.phone,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Autocomplete, {\n      getOptionLabel: function getOptionLabel(option) {\n        return option.text;\n      },\n      options: countries,\n      renderInput: function renderInput(params) {\n        return /*#__PURE__*/React.createElement(TextField, _extends({\n          fullWidth: true,\n          label: \"Country\",\n          name: \"country\",\n          onChange: handleChange,\n          variant: \"outlined\"\n        }, params, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 23\n          }\n        }));\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.state && errors.state),\n      fullWidth: true,\n      helperText: touched.state && errors.state,\n      label: \"State/Region\",\n      name: \"state\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.state,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.city && errors.city),\n      fullWidth: true,\n      helperText: touched.city && errors.city,\n      label: \"City\",\n      name: \"city\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.city,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 19\n      }\n    }))), errors.submit && /*#__PURE__*/React.createElement(Box, {\n      mt: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormHelperText, {\n      error: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 19\n      }\n    }, errors.submit))), /*#__PURE__*/React.createElement(Divider, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Box, {\n      p: 2,\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      disabled: isSubmitting,\n      type: \"submit\",\n      variant: \"contained\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 15\n      }\n    }, \"Save Changes\"))));\n  });\n};\n\nGeneralSettings.propTypes = {\n  className: PropTypes.string,\n  user: PropTypes.object.isRequired\n};\nexport default GeneralSettings;","map":{"version":3,"sources":["/Users/craigcronin/Development/applestooapples_web_template/src/views/account/AccountView/General/GeneralSettings.js"],"names":["React","clsx","PropTypes","Yup","Formik","useSnackbar","Box","Button","Card","CardContent","CardHeader","Divider","FormHelperText","Grid","Switch","TextField","Typography","makeStyles","Autocomplete","wait","countries","useStyles","root","GeneralSettings","className","user","rest","classes","enqueueSnackbar","canHire","city","country","email","isPublic","name","phone","state","submit","object","shape","bool","string","max","required","values","resetForm","setErrors","setStatus","setSubmitting","success","variant","console","error","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Boolean","option","text","params","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  FormHelperText,\n  Grid,\n  Switch,\n  TextField,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport wait from 'src/utils/wait';\nimport countries from './countries';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst GeneralSettings = ({ className, user, ...rest }) => {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={{\n        canHire: user.canHire || false,\n        city: user.city || '',\n        country: user.country || '',\n        email: user.email || '',\n        isPublic: user.isPublic || false,\n        name: user.name || '',\n        phone: user.phone || '',\n        state: user.state || '',\n        submit: null\n      }}\n      validationSchema={Yup.object().shape({\n        canHire: Yup.bool(),\n        city: Yup.string().max(255),\n        country: Yup.string().max(255),\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n        isPublic: Yup.bool(),\n        name: Yup.string().max(255).required('Name is required'),\n        phone: Yup.string(),\n        state: Yup.string()\n      })}\n      onSubmit={async (values, {\n        resetForm,\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          // NOTE: Make API request\n          await wait(200);\n          resetForm();\n          setStatus({ success: true });\n          setSubmitting(false);\n          enqueueSnackbar('Profile updated', {\n            variant: 'success'\n          });\n        } catch (err) {\n          console.error(err);\n          setStatus({ success: false });\n          setErrors({ submit: err.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <Card\n            className={clsx(classes.root, className)}\n            {...rest}\n          >\n            <CardHeader title=\"Profile\" />\n            <Divider />\n            <CardContent>\n              <Grid\n                container\n                spacing={4}\n              >\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.name && errors.name)}\n                    fullWidth\n                    helperText={touched.name && errors.name}\n                    label=\"Name\"\n                    name=\"name\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.name}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.email && errors.email)}\n                    fullWidth\n                    helperText={touched.email && errors.email ? errors.email : 'We will use this email to contact you'}\n                    label=\"Email Address\"\n                    name=\"email\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    type=\"email\"\n                    value={values.email}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.phone && errors.phone)}\n                    fullWidth\n                    helperText={touched.phone && errors.phone}\n                    label=\"Phone Number\"\n                    name=\"phone\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.phone}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <Autocomplete\n                    getOptionLabel={(option) => option.text}\n                    options={countries}\n                    renderInput={(params) => (\n                      <TextField\n                        fullWidth\n                        label=\"Country\"\n                        name=\"country\"\n                        onChange={handleChange}\n                        variant=\"outlined\"\n                        {...params}\n                      />\n                    )}\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.state && errors.state)}\n                    fullWidth\n                    helperText={touched.state && errors.state}\n                    label=\"State/Region\"\n                    name=\"state\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.state}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.city && errors.city)}\n                    fullWidth\n                    helperText={touched.city && errors.city}\n                    label=\"City\"\n                    name=\"city\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.city}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n              </Grid>\n              {errors.submit && (\n                <Box mt={3}>\n                  <FormHelperText error>\n                    {errors.submit}\n                  </FormHelperText>\n                </Box>\n              )}\n            </CardContent>\n            <Divider />\n            <Box\n              p={2}\n              display=\"flex\"\n              justifyContent=\"flex-end\"\n            >\n              <Button\n                color=\"secondary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n                variant=\"contained\"\n              >\n                Save Changes\n              </Button>\n            </Box>\n          </Card>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nGeneralSettings.propTypes = {\n  className: PropTypes.string,\n  user: PropTypes.object.isRequired\n};\n\nexport default GeneralSettings;\n"]},"metadata":{},"sourceType":"module"}