{"ast":null,"code":"import _regeneratorRuntime from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/craigcronin/Development/applestooapples_web_template/src/views/chat/ChatView/Thread/index.js\";\n\nimport React, { useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Box, Divider, makeStyles } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'src/store';\nimport { getThread, markThreadAsSeen, resetActiveThread, getParticipants, addRecipient, removeRecipient } from 'src/slices/chat';\nimport ComposeHeader from './ComposeHeader';\nimport DetailHeader from './DetailHeader';\nimport MessageList from './MessageList';\nimport MessageComposer from './MessageComposer';\n\nvar threadSelector = function threadSelector(state) {\n  var _state$chat = state.chat,\n      threads = _state$chat.threads,\n      activeThreadId = _state$chat.activeThreadId;\n  var thread = threads.byId[activeThreadId];\n\n  if (thread) {\n    return thread;\n  }\n\n  return {\n    id: null,\n    messages: [],\n    participants: [],\n    unreadMessages: 0\n  };\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      backgroundColor: theme.palette.background.dark,\n      display: 'flex',\n      flexDirection: 'column',\n      flexGrow: 1\n    }\n  };\n});\n\nvar Thread = function Thread() {\n  var classes = useStyles();\n  var dispatch = useDispatch();\n  var history = useHistory();\n\n  var _useParams = useParams(),\n      threadKey = _useParams.threadKey;\n\n  var _useSelector = useSelector(function (state) {\n    return state.chat;\n  }),\n      activeThreadId = _useSelector.activeThreadId,\n      participants = _useSelector.participants,\n      recipients = _useSelector.recipients;\n\n  var thread = useSelector(function (state) {\n    return threadSelector(state);\n  }); // In our case there two possible routes\n  // one that contains chat/new and one with a chat/:threadKey\n  // if threadKey does not exist, it means that the chat is in compose mode\n\n  var mode = threadKey ? 'DETAIL' : 'COMPOSE';\n\n  var handleAddRecipient = function handleAddRecipient(recipient) {\n    dispatch(addRecipient(recipient));\n  };\n\n  var handleRemoveRecipient = function handleRemoveRecipient(recipientId) {\n    dispatch(removeRecipient(recipientId));\n  };\n\n  var handleSendMessage = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              try {// Handle send message\n              } catch (err) {\n                console.error(err);\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSendMessage(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    var getDetails = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                dispatch(getParticipants(threadKey));\n                _context2.prev = 1;\n                _context2.next = 4;\n                return dispatch(getThread(threadKey));\n\n              case 4:\n                _context2.next = 10;\n                break;\n\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2[\"catch\"](1);\n                // If thread key is not a valid key (thread id or username)\n                // the server throws an error, this means that the user tried a shady route\n                // and we redirect him on the compose route\n                console.error(_context2.t0);\n                history.push('/app/chat/new');\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[1, 6]]);\n      }));\n\n      return function getDetails() {\n        return _ref2.apply(this, arguments);\n      };\n    }(); // If path contains a thread key we do the following:\n    // 1) Load the thread participants based on the key\n    // 2) Try to find a related thread based on the key, it might not exist if it is a new tread\n\n\n    if (threadKey) {\n      getDetails();\n    } else {\n      // If no thread key specifid, but an active thread id exists in the\n      // store, reset that key. This means that the user navigated from details mode to compose\n      if (activeThreadId) {\n        dispatch(resetActiveThread());\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [threadKey]);\n  useEffect(function () {\n    if (activeThreadId) {\n      // Maybe we should also check if active thread\n      // has unread messages before triggering this\n      dispatch(markThreadAsSeen(activeThreadId));\n    }\n  }, [dispatch, activeThreadId]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, mode === 'DETAIL' && /*#__PURE__*/React.createElement(DetailHeader, {\n    participants: participants,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }), mode === 'COMPOSE' && /*#__PURE__*/React.createElement(ComposeHeader, {\n    onAddRecipient: handleAddRecipient,\n    onRemoveRecipient: handleRemoveRecipient,\n    recipients: recipients,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    flexGrow: 1,\n    overflow: \"hidden\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MessageList, {\n    thread: thread,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Divider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(MessageComposer, {\n    disabled: true,\n    onSend: handleSendMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Thread;","map":{"version":3,"sources":["/Users/craigcronin/Development/applestooapples_web_template/src/views/chat/ChatView/Thread/index.js"],"names":["React","useEffect","useHistory","useParams","Box","Divider","makeStyles","useDispatch","useSelector","getThread","markThreadAsSeen","resetActiveThread","getParticipants","addRecipient","removeRecipient","ComposeHeader","DetailHeader","MessageList","MessageComposer","threadSelector","state","chat","threads","activeThreadId","thread","byId","id","messages","participants","unreadMessages","useStyles","theme","root","backgroundColor","palette","background","dark","display","flexDirection","flexGrow","Thread","classes","dispatch","history","threadKey","recipients","mode","handleAddRecipient","recipient","handleRemoveRecipient","recipientId","handleSendMessage","value","err","console","error","getDetails","push"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport {\n  Box,\n  Divider,\n  makeStyles\n} from '@material-ui/core';\nimport { useDispatch, useSelector } from 'src/store';\nimport {\n  getThread,\n  markThreadAsSeen,\n  resetActiveThread,\n  getParticipants,\n  addRecipient,\n  removeRecipient\n} from 'src/slices/chat';\nimport ComposeHeader from './ComposeHeader';\nimport DetailHeader from './DetailHeader';\nimport MessageList from './MessageList';\nimport MessageComposer from './MessageComposer';\n\nconst threadSelector = (state) => {\n  const { threads, activeThreadId } = state.chat;\n  const thread = threads.byId[activeThreadId];\n\n  if (thread) {\n    return thread;\n  }\n\n  return {\n    id: null,\n    messages: [],\n    participants: [],\n    unreadMessages: 0\n  };\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1\n  }\n}));\n\nconst Thread = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { threadKey } = useParams();\n  const { activeThreadId, participants, recipients } = useSelector((state) => state.chat);\n  const thread = useSelector((state) => threadSelector(state));\n\n  // In our case there two possible routes\n  // one that contains chat/new and one with a chat/:threadKey\n  // if threadKey does not exist, it means that the chat is in compose mode\n  const mode = threadKey ? 'DETAIL' : 'COMPOSE';\n\n  const handleAddRecipient = (recipient) => {\n    dispatch(addRecipient(recipient));\n  };\n\n  const handleRemoveRecipient = (recipientId) => {\n    dispatch(removeRecipient(recipientId));\n  };\n\n  const handleSendMessage = async (value) => {\n    try {\n      // Handle send message\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    const getDetails = async () => {\n      dispatch(getParticipants(threadKey));\n\n      try {\n        await dispatch(getThread(threadKey));\n      } catch (err) {\n        // If thread key is not a valid key (thread id or username)\n        // the server throws an error, this means that the user tried a shady route\n        // and we redirect him on the compose route\n        console.error(err);\n        history.push('/app/chat/new');\n      }\n    };\n\n    // If path contains a thread key we do the following:\n    // 1) Load the thread participants based on the key\n    // 2) Try to find a related thread based on the key, it might not exist if it is a new tread\n    if (threadKey) {\n      getDetails();\n    } else {\n      // If no thread key specifid, but an active thread id exists in the\n      // store, reset that key. This means that the user navigated from details mode to compose\n      if (activeThreadId) {\n        dispatch(resetActiveThread())\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [threadKey]);\n\n  useEffect(() => {\n    if (activeThreadId) {\n      // Maybe we should also check if active thread\n      // has unread messages before triggering this\n      dispatch(markThreadAsSeen(activeThreadId));\n    }\n  }, [dispatch, activeThreadId]);\n\n  return (\n    <div className={classes.root}>\n      {mode === 'DETAIL' && (\n        <DetailHeader participants={participants} />\n      )}\n      {mode === 'COMPOSE' && (\n        <ComposeHeader\n          onAddRecipient={handleAddRecipient}\n          onRemoveRecipient={handleRemoveRecipient}\n          recipients={recipients}\n        />\n      )}\n      <Box\n        flexGrow={1}\n        overflow=\"hidden\"\n      >\n        <MessageList thread={thread} />\n      </Box>\n      <Divider />\n      <MessageComposer\n        disabled\n        onSend={handleSendMessage}\n      />\n    </div>\n  );\n};\n\nexport default Thread;\n"]},"metadata":{},"sourceType":"module"}