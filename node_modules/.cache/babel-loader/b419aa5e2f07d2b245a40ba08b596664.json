{"ast":null,"code":"import _slicedToArray from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/craigcronin/Development/applestooapples_web_template/src/contexts/SettingsContext.js\";\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport _ from 'lodash';\nimport { THEMES } from 'src/constants';\nvar defaultSettings = {\n  direction: 'ltr',\n  responsiveFontSizes: true,\n  theme: THEMES.ONE_DARK\n};\nexport var restoreSettings = function restoreSettings() {\n  var settings = null;\n\n  try {\n    var storedData = window.localStorage.getItem('settings');\n\n    if (storedData) {\n      settings = JSON.parse(storedData);\n    }\n  } catch (err) {\n    console.error(err); // If stored data is not a strigified JSON this will fail,\n    // that's why we catch the error\n  }\n\n  return settings;\n};\nexport var storeSettings = function storeSettings(settings) {\n  window.localStorage.setItem('settings', JSON.stringify(settings));\n};\nvar SettingsContext = createContext({\n  settings: defaultSettings,\n  saveSettings: function saveSettings() {}\n});\nexport var SettingsProvider = function SettingsProvider(_ref) {\n  var settings = _ref.settings,\n      children = _ref.children;\n\n  var _useState = useState(settings || defaultSettings),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentSettings = _useState2[0],\n      setCurrentSettings = _useState2[1];\n\n  var handleSaveSettings = function handleSaveSettings() {\n    var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var mergedSettings = _.merge({}, currentSettings, update);\n\n    setCurrentSettings(mergedSettings);\n    storeSettings(mergedSettings);\n  };\n\n  useEffect(function () {\n    var restoredSettings = restoreSettings();\n\n    if (restoredSettings) {\n      setCurrentSettings(restoredSettings);\n    }\n  }, []);\n  useEffect(function () {\n    document.dir = currentSettings.direction;\n  }, [currentSettings]);\n  return /*#__PURE__*/React.createElement(SettingsContext.Provider, {\n    value: {\n      settings: currentSettings,\n      saveSettings: handleSaveSettings\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport var SettingsConsumer = SettingsContext.Consumer;\nexport default SettingsContext;","map":{"version":3,"sources":["/Users/craigcronin/Development/applestooapples_web_template/src/contexts/SettingsContext.js"],"names":["React","createContext","useEffect","useState","_","THEMES","defaultSettings","direction","responsiveFontSizes","theme","ONE_DARK","restoreSettings","settings","storedData","window","localStorage","getItem","JSON","parse","err","console","error","storeSettings","setItem","stringify","SettingsContext","saveSettings","SettingsProvider","children","currentSettings","setCurrentSettings","handleSaveSettings","update","mergedSettings","merge","restoredSettings","document","dir","SettingsConsumer","Consumer"],"mappings":";;;;;AAAA,OAAOA,KAAP,IACEC,aADF,EAEEC,SAFF,EAGEC,QAHF,QAIO,OAJP;AAKA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,MAAT,QAAuB,eAAvB;AAEA,IAAMC,eAAe,GAAG;AACtBC,EAAAA,SAAS,EAAE,KADW;AAEtBC,EAAAA,mBAAmB,EAAE,IAFC;AAGtBC,EAAAA,KAAK,EAAEJ,MAAM,CAACK;AAHQ,CAAxB;AAMA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC,MAAIC,QAAQ,GAAG,IAAf;;AAEA,MAAI;AACF,QAAMC,UAAU,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAnB;;AAEA,QAAIH,UAAJ,EAAgB;AACdD,MAAAA,QAAQ,GAAGK,IAAI,CAACC,KAAL,CAAWL,UAAX,CAAX;AACD;AACF,GAND,CAME,OAAOM,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd,EADY,CAEZ;AACA;AACD;;AAED,SAAOP,QAAP;AACD,CAhBM;AAkBP,OAAO,IAAMU,aAAa,GAAG,SAAhBA,aAAgB,CAACV,QAAD,EAAc;AACzCE,EAAAA,MAAM,CAACC,YAAP,CAAoBQ,OAApB,CAA4B,UAA5B,EAAwCN,IAAI,CAACO,SAAL,CAAeZ,QAAf,CAAxC;AACD,CAFM;AAIP,IAAMa,eAAe,GAAGxB,aAAa,CAAC;AACpCW,EAAAA,QAAQ,EAAEN,eAD0B;AAEpCoB,EAAAA,YAAY,EAAE,wBAAM,CAAG;AAFa,CAAD,CAArC;AAKA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAA4B;AAAA,MAAzBf,QAAyB,QAAzBA,QAAyB;AAAA,MAAfgB,QAAe,QAAfA,QAAe;;AAAA,kBACZzB,QAAQ,CAACS,QAAQ,IAAIN,eAAb,CADI;AAAA;AAAA,MACnDuB,eADmD;AAAA,MAClCC,kBADkC;;AAG1D,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAiB;AAAA,QAAhBC,MAAgB,uEAAP,EAAO;;AAC1C,QAAMC,cAAc,GAAG7B,CAAC,CAAC8B,KAAF,CAAQ,EAAR,EAAYL,eAAZ,EAA6BG,MAA7B,CAAvB;;AAEAF,IAAAA,kBAAkB,CAACG,cAAD,CAAlB;AACAX,IAAAA,aAAa,CAACW,cAAD,CAAb;AACD,GALD;;AAOA/B,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMiC,gBAAgB,GAAGxB,eAAe,EAAxC;;AAEA,QAAIwB,gBAAJ,EAAsB;AACpBL,MAAAA,kBAAkB,CAACK,gBAAD,CAAlB;AACD;AACF,GANQ,EAMN,EANM,CAAT;AAQAjC,EAAAA,SAAS,CAAC,YAAM;AACdkC,IAAAA,QAAQ,CAACC,GAAT,GAAeR,eAAe,CAACtB,SAA/B;AACD,GAFQ,EAEN,CAACsB,eAAD,CAFM,CAAT;AAIA,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AACE,IAAA,KAAK,EAAE;AACLjB,MAAAA,QAAQ,EAAEiB,eADL;AAELH,MAAAA,YAAY,EAAEK;AAFT,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGH,QANH,CADF;AAUD,CAhCM;AAkCP,OAAO,IAAMU,gBAAgB,GAAGb,eAAe,CAACc,QAAzC;AAEP,eAAed,eAAf","sourcesContent":["import React, {\n  createContext,\n  useEffect,\n  useState\n} from 'react';\nimport _ from 'lodash';\nimport { THEMES } from 'src/constants';\n\nconst defaultSettings = {\n  direction: 'ltr',\n  responsiveFontSizes: true,\n  theme: THEMES.ONE_DARK\n};\n\nexport const restoreSettings = () => {\n  let settings = null;\n\n  try {\n    const storedData = window.localStorage.getItem('settings');\n\n    if (storedData) {\n      settings = JSON.parse(storedData);\n    }\n  } catch (err) {\n    console.error(err);\n    // If stored data is not a strigified JSON this will fail,\n    // that's why we catch the error\n  }\n\n  return settings;\n};\n\nexport const storeSettings = (settings) => {\n  window.localStorage.setItem('settings', JSON.stringify(settings));\n};\n\nconst SettingsContext = createContext({\n  settings: defaultSettings,\n  saveSettings: () => { }\n});\n\nexport const SettingsProvider = ({ settings, children }) => {\n  const [currentSettings, setCurrentSettings] = useState(settings || defaultSettings);\n\n  const handleSaveSettings = (update = {}) => {\n    const mergedSettings = _.merge({}, currentSettings, update);\n\n    setCurrentSettings(mergedSettings);\n    storeSettings(mergedSettings);\n  };\n\n  useEffect(() => {\n    const restoredSettings = restoreSettings();\n\n    if (restoredSettings) {\n      setCurrentSettings(restoredSettings);\n    }\n  }, []);\n\n  useEffect(() => {\n    document.dir = currentSettings.direction;\n  }, [currentSettings]);\n\n  return (\n    <SettingsContext.Provider\n      value={{\n        settings: currentSettings,\n        saveSettings: handleSaveSettings\n      }}\n    >\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n\nexport const SettingsConsumer = SettingsContext.Consumer;\n\nexport default SettingsContext;\n"]},"metadata":{},"sourceType":"module"}