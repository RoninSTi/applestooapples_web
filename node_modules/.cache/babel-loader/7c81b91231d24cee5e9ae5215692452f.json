{"ast":null,"code":"import _extends from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/craigcronin/Development/applestooapples_web_template/src/views/calendar/CalendarView/Toolbar.js\";\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport { Button, ButtonGroup, Grid, Hidden, IconButton, Tooltip, Typography, makeStyles } from '@material-ui/core';\nimport ViewConfigIcon from '@material-ui/icons/ViewComfyOutlined';\nimport ViewWeekIcon from '@material-ui/icons/ViewWeekOutlined';\nimport ViewDayIcon from '@material-ui/icons/ViewDayOutlined';\nimport ViewAgendaIcon from '@material-ui/icons/ViewAgendaOutlined';\nvar viewOptions = [{\n  label: 'Month',\n  value: 'dayGridMonth',\n  icon: ViewConfigIcon\n}, {\n  label: 'Week',\n  value: 'timeGridWeek',\n  icon: ViewWeekIcon\n}, {\n  label: 'Day',\n  value: 'timeGridDay',\n  icon: ViewDayIcon\n}, {\n  label: 'Agenda',\n  value: 'listWeek',\n  icon: ViewAgendaIcon\n}];\nvar useStyles = makeStyles(function () {\n  return {\n    root: {}\n  };\n});\n\nvar Toolbar = function Toolbar(_ref) {\n  var className = _ref.className,\n      date = _ref.date,\n      onDateNext = _ref.onDateNext,\n      onDatePrev = _ref.onDatePrev,\n      onDateToday = _ref.onDateToday,\n      onAddClick = _ref.onAddClick,\n      onViewChange = _ref.onViewChange,\n      view = _ref.view,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"date\", \"onDateNext\", \"onDatePrev\", \"onDateToday\", \"onAddClick\", \"onViewChange\", \"view\"]);\n\n  var classes = useStyles();\n  return /*#__PURE__*/React.createElement(Grid, _extends({\n    className: clsx(classes.root, className),\n    alignItems: \"center\",\n    container: true,\n    justify: \"space-between\",\n    spacing: 3\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ButtonGroup, {\n    size: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: onDatePrev,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, \"Prev\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: onDateToday,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"Today\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: onDateNext,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"Next\"))), /*#__PURE__*/React.createElement(Hidden, {\n    smDown: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h3\",\n    color: \"textPrimary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, moment(date).format('MMMM YYYY'))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, viewOptions.map(function (viewOption) {\n    var Icon = viewOption.icon;\n    return /*#__PURE__*/React.createElement(Tooltip, {\n      key: viewOption.value,\n      title: viewOption.label,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      color: viewOption.value === view ? 'secondary' : 'default',\n      onClick: function onClick() {\n        return onViewChange(viewOption.value);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 19\n      }\n    })));\n  }))));\n};\n\nToolbar.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  date: PropTypes.instanceOf(Date).isRequired,\n  onDateNext: PropTypes.func,\n  onDatePrev: PropTypes.func,\n  onDateToday: PropTypes.func,\n  onAddClick: PropTypes.func,\n  onViewChange: PropTypes.func,\n  view: PropTypes.oneOf(['dayGridMonth', 'timeGridWeek', 'timeGridDay', 'listWeek'])\n};\nToolbar.defaultProps = {\n  onDateNext: function onDateNext() {},\n  onDatePrev: function onDatePrev() {},\n  onDateToday: function onDateToday() {},\n  onAddClick: function onAddClick() {},\n  onViewChange: function onViewChange() {}\n};\nexport default Toolbar;","map":{"version":3,"sources":["/Users/craigcronin/Development/applestooapples_web_template/src/views/calendar/CalendarView/Toolbar.js"],"names":["React","clsx","moment","PropTypes","Button","ButtonGroup","Grid","Hidden","IconButton","Tooltip","Typography","makeStyles","ViewConfigIcon","ViewWeekIcon","ViewDayIcon","ViewAgendaIcon","viewOptions","label","value","icon","useStyles","root","Toolbar","className","date","onDateNext","onDatePrev","onDateToday","onAddClick","onViewChange","view","rest","classes","format","map","viewOption","Icon","propTypes","children","node","string","instanceOf","Date","isRequired","func","oneOf","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  ButtonGroup,\n  Grid,\n  Hidden,\n  IconButton,\n  Tooltip,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport ViewConfigIcon from '@material-ui/icons/ViewComfyOutlined';\nimport ViewWeekIcon from '@material-ui/icons/ViewWeekOutlined';\nimport ViewDayIcon from '@material-ui/icons/ViewDayOutlined';\nimport ViewAgendaIcon from '@material-ui/icons/ViewAgendaOutlined';\n\nconst viewOptions = [\n  {\n    label: 'Month',\n    value: 'dayGridMonth',\n    icon: ViewConfigIcon\n  },\n  {\n    label: 'Week',\n    value: 'timeGridWeek',\n    icon: ViewWeekIcon\n  },\n  {\n    label: 'Day',\n    value: 'timeGridDay',\n    icon: ViewDayIcon\n  },\n  {\n    label: 'Agenda',\n    value: 'listWeek',\n    icon: ViewAgendaIcon\n  }\n];\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Toolbar = ({\n  className,\n  date,\n  onDateNext,\n  onDatePrev,\n  onDateToday,\n  onAddClick,\n  onViewChange,\n  view,\n  ...rest\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      className={clsx(classes.root, className)}\n      alignItems=\"center\"\n      container\n      justify=\"space-between\"\n      spacing={3}\n      {...rest}\n    >\n      <Grid item>\n        <ButtonGroup size=\"small\">\n          <Button onClick={onDatePrev}>Prev</Button>\n          <Button onClick={onDateToday}>Today</Button>\n          <Button onClick={onDateNext}>Next</Button>\n        </ButtonGroup>\n      </Grid>\n      <Hidden smDown>\n        <Grid item>\n          <Typography\n            variant=\"h3\"\n            color=\"textPrimary\"\n          >\n            {moment(date).format('MMMM YYYY')}\n          </Typography>\n        </Grid>\n        <Grid item>\n          {viewOptions.map((viewOption) => {\n            const Icon = viewOption.icon;\n\n            return (\n              <Tooltip\n                key={viewOption.value}\n                title={viewOption.label}\n              >\n                <IconButton\n                  color={viewOption.value === view ? 'secondary' : 'default'}\n                  onClick={() => onViewChange(viewOption.value)}\n                >\n                  <Icon />\n                </IconButton>\n              </Tooltip>\n            );\n          })}\n        </Grid>\n      </Hidden>\n    </Grid>\n  );\n};\n\nToolbar.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  date: PropTypes.instanceOf(Date).isRequired,\n  onDateNext: PropTypes.func,\n  onDatePrev: PropTypes.func,\n  onDateToday: PropTypes.func,\n  onAddClick: PropTypes.func,\n  onViewChange: PropTypes.func,\n  view: PropTypes.oneOf(['dayGridMonth', 'timeGridWeek', 'timeGridDay', 'listWeek'])\n};\n\nToolbar.defaultProps = {\n  onDateNext: () => {},\n  onDatePrev: () => {},\n  onDateToday: () => {},\n  onAddClick: () => {},\n  onViewChange: () => {}\n};\n\nexport default Toolbar;\n"]},"metadata":{},"sourceType":"module"}