{"ast":null,"code":"import _extends from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/craigcronin/Development/applestooapples_web_template/src/views/chat/ChatView/RecentThreads/ThreadItem.js\";\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { Avatar, Box, Chip, ListItem, ListItemAvatar, ListItemText, makeStyles } from '@material-ui/core';\nimport { AvatarGroup } from '@material-ui/lab';\n\nvar getDetails = function getDetails(thread, currentUserId) {\n  var otherParticipants = thread.participants.filter(function (participant) {\n    return participant.id !== currentUserId;\n  });\n  var displayNames = otherParticipants.reduce(function (names, participant) {\n    return [].concat(_toConsumableArray(names), [participant.name]);\n  }, []).join(', ');\n  var displayText = '';\n  var lastMessage = thread.messages[thread.messages.length - 1];\n\n  if (lastMessage) {\n    var sender = lastMessage.senderId === currentUserId ? 'Me: ' : '';\n    var message = lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body;\n    displayText = \"\".concat(sender).concat(message);\n  }\n\n  return {\n    otherParticipants: otherParticipants,\n    displayNames: displayNames,\n    displayText: displayText\n  };\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    active: {\n      backgroundColor: theme.palette.action.selected,\n      boxShadow: \"inset 4px 0px 0px \".concat(theme.palette.secondary.main)\n    },\n    smallAvatar: {\n      height: 30,\n      width: 30,\n      '&:first-child': {\n        marginTop: 10\n      }\n    },\n    unreadIndicator: {\n      height: 18,\n      marginTop: 2,\n      minWidth: 18,\n      padding: 2\n    }\n  };\n});\n\nvar ThreadItem = function ThreadItem(_ref) {\n  var active = _ref.active,\n      className = _ref.className,\n      thread = _ref.thread,\n      onSelect = _ref.onSelect,\n      rest = _objectWithoutProperties(_ref, [\"active\", \"className\", \"thread\", \"onSelect\"]);\n\n  var classes = useStyles(); // We hardcode the current user ID because the mocked that is not in sync with the auth provider.\n  // When implementing this app with a real database, replace this ID with the ID from Auth Context.\n\n  var details = getDetails(thread, '5e86809283e28b96d2d38537');\n  return /*#__PURE__*/React.createElement(ListItem, _extends({\n    button: true,\n    className: clsx(_defineProperty({}, classes.active, active), className),\n    onClick: onSelect\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(ListItemAvatar, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AvatarGroup, {\n    classes: {\n      avatar: details.otherParticipants.length > 1 ? classes.smallAvatar : null\n    },\n    max: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, details.otherParticipants.map(function (participant) {\n    return /*#__PURE__*/React.createElement(Avatar, {\n      alt: \"Person\",\n      key: participant.id,\n      src: participant.avatar,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    });\n  }))), /*#__PURE__*/React.createElement(ListItemText, {\n    primary: details.displayNames,\n    primaryTypographyProps: {\n      noWrap: true,\n      variant: 'h6',\n      color: 'textPrimary'\n    },\n    secondary: details.displayText,\n    secondaryTypographyProps: {\n      noWrap: true,\n      variant: 'body2',\n      color: 'textSecondary'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    ml: 2,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"flex-end\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, thread.unreadCount > 0 && /*#__PURE__*/React.createElement(Chip, {\n    className: classes.unreadIndicator,\n    color: \"secondary\",\n    size: \"small\",\n    label: thread.unreadCount,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  })));\n};\n\nThreadItem.propTypes = {\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  onSelect: PropTypes.func,\n  thread: PropTypes.object.isRequired\n};\nThreadItem.defaultProps = {\n  active: false,\n  onSelect: function onSelect() {}\n};\nexport default ThreadItem;","map":{"version":3,"sources":["/Users/craigcronin/Development/applestooapples_web_template/src/views/chat/ChatView/RecentThreads/ThreadItem.js"],"names":["React","PropTypes","clsx","Avatar","Box","Chip","ListItem","ListItemAvatar","ListItemText","makeStyles","AvatarGroup","getDetails","thread","currentUserId","otherParticipants","participants","filter","participant","id","displayNames","reduce","names","name","join","displayText","lastMessage","messages","length","sender","senderId","message","contentType","body","useStyles","theme","active","backgroundColor","palette","action","selected","boxShadow","secondary","main","smallAvatar","height","width","marginTop","unreadIndicator","minWidth","padding","ThreadItem","className","onSelect","rest","classes","details","avatar","map","noWrap","variant","color","unreadCount","propTypes","bool","string","func","object","isRequired","defaultProps"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SACEC,MADF,EAEEC,GAFF,EAGEC,IAHF,EAIEC,QAJF,EAKEC,cALF,EAMEC,YANF,EAOEC,UAPF,QAQO,mBARP;AASA,SAASC,WAAT,QAA4B,kBAA5B;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD,EAASC,aAAT,EAA2B;AAC5C,MAAMC,iBAAiB,GAAGF,MAAM,CAACG,YAAP,CAAoBC,MAApB,CAA2B,UAACC,WAAD;AAAA,WAAiBA,WAAW,CAACC,EAAZ,KAAmBL,aAApC;AAAA,GAA3B,CAA1B;AACA,MAAMM,YAAY,GAAGL,iBAAiB,CAACM,MAAlB,CAAyB,UAACC,KAAD,EAAQJ,WAAR;AAAA,wCAA4BI,KAA5B,IAAmCJ,WAAW,CAACK,IAA/C;AAAA,GAAzB,EAA+E,EAA/E,EAAmFC,IAAnF,CAAwF,IAAxF,CAArB;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAMC,WAAW,GAAGb,MAAM,CAACc,QAAP,CAAgBd,MAAM,CAACc,QAAP,CAAgBC,MAAhB,GAAyB,CAAzC,CAApB;;AAEA,MAAIF,WAAJ,EAAiB;AACf,QAAMG,MAAM,GAAGH,WAAW,CAACI,QAAZ,KAAyBhB,aAAzB,GAAyC,MAAzC,GAAkD,EAAjE;AACA,QAAMiB,OAAO,GAAGL,WAAW,CAACM,WAAZ,KAA4B,OAA5B,GAAsC,cAAtC,GAAuDN,WAAW,CAACO,IAAnF;AAEAR,IAAAA,WAAW,aAAMI,MAAN,SAAeE,OAAf,CAAX;AACD;;AAED,SAAO;AACLhB,IAAAA,iBAAiB,EAAjBA,iBADK;AAELK,IAAAA,YAAY,EAAZA,YAFK;AAGLK,IAAAA,WAAW,EAAXA;AAHK,GAAP;AAKD,CAlBD;;AAoBA,IAAMS,SAAS,GAAGxB,UAAU,CAAC,UAACyB,KAAD;AAAA,SAAY;AACvCC,IAAAA,MAAM,EAAE;AACNC,MAAAA,eAAe,EAAEF,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBC,QADhC;AAENC,MAAAA,SAAS,8BAAuBN,KAAK,CAACG,OAAN,CAAcI,SAAd,CAAwBC,IAA/C;AAFH,KAD+B;AAKvCC,IAAAA,WAAW,EAAE;AACXC,MAAAA,MAAM,EAAE,EADG;AAEXC,MAAAA,KAAK,EAAE,EAFI;AAGX,uBAAiB;AACfC,QAAAA,SAAS,EAAE;AADI;AAHN,KAL0B;AAYvCC,IAAAA,eAAe,EAAE;AACfH,MAAAA,MAAM,EAAE,EADO;AAEfE,MAAAA,SAAS,EAAE,CAFI;AAGfE,MAAAA,QAAQ,EAAE,EAHK;AAIfC,MAAAA,OAAO,EAAE;AAJM;AAZsB,GAAZ;AAAA,CAAD,CAA5B;;AAoBA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAMb;AAAA,MALJf,MAKI,QALJA,MAKI;AAAA,MAJJgB,SAII,QAJJA,SAII;AAAA,MAHJvC,MAGI,QAHJA,MAGI;AAAA,MAFJwC,QAEI,QAFJA,QAEI;AAAA,MADDC,IACC;;AACJ,MAAMC,OAAO,GAAGrB,SAAS,EAAzB,CADI,CAGJ;AACA;;AACA,MAAMsB,OAAO,GAAG5C,UAAU,CAACC,MAAD,EAAS,0BAAT,CAA1B;AAEA,sBACE,oBAAC,QAAD;AACE,IAAA,MAAM,MADR;AAEE,IAAA,SAAS,EAAEV,IAAI,qBACVoD,OAAO,CAACnB,MADE,EACOA,MADP,GAEbgB,SAFa,CAFjB;AAME,IAAA,OAAO,EAAEC;AANX,KAOMC,IAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBASE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AACE,IAAA,OAAO,EAAE;AAAEG,MAAAA,MAAM,EAAED,OAAO,CAACzC,iBAAR,CAA0Ba,MAA1B,GAAmC,CAAnC,GAAuC2B,OAAO,CAACX,WAA/C,GAA6D;AAAvE,KADX;AAEE,IAAA,GAAG,EAAE,CAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGY,OAAO,CAACzC,iBAAR,CAA0B2C,GAA1B,CAA8B,UAACxC,WAAD;AAAA,wBAC7B,oBAAC,MAAD;AACE,MAAA,GAAG,EAAC,QADN;AAEE,MAAA,GAAG,EAAEA,WAAW,CAACC,EAFnB;AAGE,MAAA,GAAG,EAAED,WAAW,CAACuC,MAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD6B;AAAA,GAA9B,CAJH,CADF,CATF,eAuBE,oBAAC,YAAD;AACE,IAAA,OAAO,EAAED,OAAO,CAACpC,YADnB;AAEE,IAAA,sBAAsB,EAAE;AACtBuC,MAAAA,MAAM,EAAE,IADc;AAEtBC,MAAAA,OAAO,EAAE,IAFa;AAGtBC,MAAAA,KAAK,EAAE;AAHe,KAF1B;AAOE,IAAA,SAAS,EAAEL,OAAO,CAAC/B,WAPrB;AAQE,IAAA,wBAAwB,EAAE;AACxBkC,MAAAA,MAAM,EAAE,IADgB;AAExBC,MAAAA,OAAO,EAAE,OAFe;AAGxBC,MAAAA,KAAK,EAAE;AAHiB,KAR5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBF,eAqCE,oBAAC,GAAD;AACE,IAAA,EAAE,EAAE,CADN;AAEE,IAAA,OAAO,EAAC,MAFV;AAGE,IAAA,aAAa,EAAC,QAHhB;AAIE,IAAA,UAAU,EAAC,UAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGhD,MAAM,CAACiD,WAAP,GAAqB,CAArB,iBACC,oBAAC,IAAD;AACE,IAAA,SAAS,EAAEP,OAAO,CAACP,eADrB;AAEE,IAAA,KAAK,EAAC,WAFR;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,KAAK,EAAEnC,MAAM,CAACiD,WAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CArCF,CADF;AAuDD,CApED;;AAsEAX,UAAU,CAACY,SAAX,GAAuB;AACrB3B,EAAAA,MAAM,EAAElC,SAAS,CAAC8D,IADG;AAErBZ,EAAAA,SAAS,EAAElD,SAAS,CAAC+D,MAFA;AAGrBZ,EAAAA,QAAQ,EAAEnD,SAAS,CAACgE,IAHC;AAIrBrD,EAAAA,MAAM,EAAEX,SAAS,CAACiE,MAAV,CAAiBC;AAJJ,CAAvB;AAOAjB,UAAU,CAACkB,YAAX,GAA0B;AACxBjC,EAAAA,MAAM,EAAE,KADgB;AAExBiB,EAAAA,QAAQ,EAAE,oBAAM,CAAG;AAFK,CAA1B;AAKA,eAAeF,UAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Avatar,\n  Box,\n  Chip,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  makeStyles\n} from '@material-ui/core';\nimport { AvatarGroup } from '@material-ui/lab';\n\nconst getDetails = (thread, currentUserId) => {\n  const otherParticipants = thread.participants.filter((participant) => participant.id !== currentUserId);\n  const displayNames = otherParticipants.reduce((names, participant) => [...names, participant.name], []).join(', ');\n  let displayText = ''\n  const lastMessage = thread.messages[thread.messages.length - 1];\n\n  if (lastMessage) {\n    const sender = lastMessage.senderId === currentUserId ? 'Me: ' : '';\n    const message = lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body;\n    \n    displayText = `${sender}${message}`\n  }\n\n  return {\n    otherParticipants,\n    displayNames,\n    displayText\n  };\n};\n\nconst useStyles = makeStyles((theme) => ({\n  active: {\n    backgroundColor: theme.palette.action.selected,\n    boxShadow: `inset 4px 0px 0px ${theme.palette.secondary.main}`\n  },\n  smallAvatar: {\n    height: 30,\n    width: 30,\n    '&:first-child': {\n      marginTop: 10\n    }\n  },\n  unreadIndicator: {\n    height: 18,\n    marginTop: 2,\n    minWidth: 18,\n    padding: 2\n  }\n}));\n\nconst ThreadItem = ({\n  active,\n  className,\n  thread,\n  onSelect,\n  ...rest\n}) => {\n  const classes = useStyles();\n\n  // We hardcode the current user ID because the mocked that is not in sync with the auth provider.\n  // When implementing this app with a real database, replace this ID with the ID from Auth Context.\n  const details = getDetails(thread, '5e86809283e28b96d2d38537');\n\n  return (\n    <ListItem\n      button\n      className={clsx(\n        { [classes.active]: active },\n        className\n      )}\n      onClick={onSelect}\n      {...rest}\n    >\n      <ListItemAvatar>\n        <AvatarGroup\n          classes={{ avatar: details.otherParticipants.length > 1 ? classes.smallAvatar : null }}\n          max={2}\n        >\n          {details.otherParticipants.map((participant) => (\n            <Avatar\n              alt=\"Person\"\n              key={participant.id}\n              src={participant.avatar}\n            />\n          ))}\n        </AvatarGroup>\n      </ListItemAvatar>\n      <ListItemText\n        primary={details.displayNames}\n        primaryTypographyProps={{\n          noWrap: true,\n          variant: 'h6',\n          color: 'textPrimary'\n        }}\n        secondary={details.displayText}\n        secondaryTypographyProps={{\n          noWrap: true,\n          variant: 'body2',\n          color: 'textSecondary'\n        }}\n      />\n      <Box\n        ml={2}\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"flex-end\"\n      >\n        {thread.unreadCount > 0 && (\n          <Chip\n            className={classes.unreadIndicator}\n            color=\"secondary\"\n            size=\"small\"\n            label={thread.unreadCount}\n          />\n        )}\n      </Box>\n    </ListItem>\n  );\n};\n\nThreadItem.propTypes = {\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  onSelect: PropTypes.func,\n  thread: PropTypes.object.isRequired\n};\n\nThreadItem.defaultProps = {\n  active: false,\n  onSelect: () => { }\n};\n\nexport default ThreadItem;\n"]},"metadata":{},"sourceType":"module"}