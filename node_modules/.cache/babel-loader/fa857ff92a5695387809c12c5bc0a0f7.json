{"ast":null,"code":"import _regeneratorRuntime from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/craigcronin/Development/applestooapples_web_template/src/contexts/Auth0Context.js\";\n\nimport React, { createContext, useEffect, useReducer } from 'react';\nimport { Auth0Client } from '@auth0/auth0-spa-js';\nimport SplashScreen from 'src/components/SplashScreen';\nimport { auth0Config } from 'src/config';\nvar auth0Client = null;\nvar initialAuthState = {\n  isAuthenticated: false,\n  isInitialised: false,\n  user: null\n};\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case 'INITIALISE':\n      {\n        var _action$payload = action.payload,\n            isAuthenticated = _action$payload.isAuthenticated,\n            user = _action$payload.user;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isAuthenticated: isAuthenticated,\n          isInitialised: true,\n          user: user\n        });\n      }\n\n    case 'LOGIN':\n      {\n        var _user = action.payload.user;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isAuthenticated: true,\n          user: _user\n        });\n      }\n\n    case 'LOGOUT':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isAuthenticated: false,\n          user: null\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nvar AuthContext = createContext(_objectSpread(_objectSpread({}, initialAuthState), {}, {\n  method: 'Auth0',\n  loginWithPopup: function loginWithPopup() {\n    return Promise.resolve();\n  },\n  logout: function logout() {}\n}));\nexport var AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children;\n\n  var _useReducer = useReducer(reducer, initialAuthState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var loginWithPopup = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n      var isAuthenticated, user;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return auth0Client.loginWithPopup(options);\n\n            case 2:\n              _context.next = 4;\n              return auth0Client.isAuthenticated();\n\n            case 4:\n              isAuthenticated = _context.sent;\n\n              if (!isAuthenticated) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 8;\n              return auth0Client.getUser();\n\n            case 8:\n              user = _context.sent;\n              // Here you should extract the complete user profile to make it available in your entire app.\n              // The auth state only provides basic information.\n              dispatch({\n                type: 'LOGIN',\n                payload: {\n                  user: {\n                    id: user.sub,\n                    avatar: user.picture,\n                    email: user.email,\n                    name: user.name,\n                    tier: 'Premium'\n                  }\n                }\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loginWithPopup(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var logout = function logout() {\n    auth0Client.logout();\n    dispatch({\n      type: 'LOGOUT'\n    });\n  };\n\n  useEffect(function () {\n    var initialise = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var isAuthenticated, user;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                auth0Client = new Auth0Client(_objectSpread({\n                  redirect_uri: window.location.origin\n                }, auth0Config));\n                _context2.next = 4;\n                return auth0Client.checkSession();\n\n              case 4:\n                _context2.next = 6;\n                return auth0Client.isAuthenticated();\n\n              case 6:\n                isAuthenticated = _context2.sent;\n\n                if (!isAuthenticated) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                _context2.next = 10;\n                return auth0Client.getUser();\n\n              case 10:\n                user = _context2.sent;\n                // Here you should extract the complete user profile to make it available in your entire app.\n                // The auth state only provides basic information.\n                dispatch({\n                  type: 'INITIALISE',\n                  payload: {\n                    isAuthenticated: isAuthenticated,\n                    user: {\n                      id: user.sub,\n                      avatar: user.picture,\n                      email: user.email,\n                      name: user.name,\n                      tier: 'Premium'\n                    }\n                  }\n                });\n                _context2.next = 15;\n                break;\n\n              case 14:\n                dispatch({\n                  type: 'INITIALISE',\n                  payload: {\n                    isAuthenticated: isAuthenticated,\n                    user: null\n                  }\n                });\n\n              case 15:\n                _context2.next = 21;\n                break;\n\n              case 17:\n                _context2.prev = 17;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.error(_context2.t0);\n                dispatch({\n                  type: 'INITIALISE',\n                  payload: {\n                    isAuthenticated: false,\n                    user: null\n                  }\n                });\n\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 17]]);\n      }));\n\n      return function initialise() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    initialise();\n  }, []);\n\n  if (!state.isInitialised) {\n    return /*#__PURE__*/React.createElement(SplashScreen, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: _objectSpread(_objectSpread({}, state), {}, {\n      method: 'Auth0',\n      loginWithPopup: loginWithPopup,\n      logout: logout\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport default AuthContext;","map":{"version":3,"sources":["/Users/craigcronin/Development/applestooapples_web_template/src/contexts/Auth0Context.js"],"names":["React","createContext","useEffect","useReducer","Auth0Client","SplashScreen","auth0Config","auth0Client","initialAuthState","isAuthenticated","isInitialised","user","reducer","state","action","type","payload","AuthContext","method","loginWithPopup","Promise","resolve","logout","AuthProvider","children","dispatch","options","getUser","id","sub","avatar","picture","email","name","tier","initialise","redirect_uri","window","location","origin","checkSession","console","error"],"mappings":"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","sourcesContent":["import React, {\n  createContext,\n  useEffect,\n  useReducer\n} from 'react';\nimport { Auth0Client } from '@auth0/auth0-spa-js';\nimport SplashScreen from 'src/components/SplashScreen';\nimport { auth0Config } from 'src/config';\n\nlet auth0Client = null;\n\nconst initialAuthState = {\n  isAuthenticated: false,\n  isInitialised: false,\n  user: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'INITIALISE': {\n      const { isAuthenticated, user } = action.payload;\n\n      return {\n        ...state,\n        isAuthenticated,\n        isInitialised: true,\n        user\n      };\n    }\n    case 'LOGIN': {\n      const { user } = action.payload;\n\n      return {\n        ...state,\n        isAuthenticated: true,\n        user\n      };\n    }\n    case 'LOGOUT': {\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null\n      };\n    }\n    default: {\n      return { ...state };\n    }\n  }\n};\n\nconst AuthContext = createContext({\n  ...initialAuthState,\n  method: 'Auth0',\n  loginWithPopup: () => Promise.resolve(),\n  logout: () => { }\n});\n\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialAuthState);\n\n  const loginWithPopup = async (options) => {\n    await auth0Client.loginWithPopup(options);\n\n    const isAuthenticated = await auth0Client.isAuthenticated();\n\n    if (isAuthenticated) {\n      const user = await auth0Client.getUser();\n\n      // Here you should extract the complete user profile to make it available in your entire app.\n      // The auth state only provides basic information.\n\n      dispatch({\n        type: 'LOGIN',\n        payload: {\n          user: {\n            id: user.sub,\n            avatar: user.picture,\n            email: user.email,\n            name: user.name,\n            tier: 'Premium'\n          }\n        }\n      });\n    }\n  };\n\n  const logout = () => {\n    auth0Client.logout();\n\n    dispatch({\n      type: 'LOGOUT'\n    });\n  };\n\n  useEffect(() => {\n    const initialise = async () => {\n      try {\n        auth0Client = new Auth0Client({\n          redirect_uri: window.location.origin,\n          ...auth0Config\n        });\n\n        await auth0Client.checkSession();\n\n        const isAuthenticated = await auth0Client.isAuthenticated();\n\n        if (isAuthenticated) {\n          const user = await auth0Client.getUser();\n\n          // Here you should extract the complete user profile to make it available in your entire app.\n          // The auth state only provides basic information.\n\n          dispatch({\n            type: 'INITIALISE',\n            payload: {\n              isAuthenticated,\n              user: {\n                id: user.sub,\n                avatar: user.picture,\n                email: user.email,\n                name: user.name,\n                tier: 'Premium'\n              }\n            }\n          });\n        } else {\n          dispatch({\n            type: 'INITIALISE',\n            payload: {\n              isAuthenticated,\n              user: null\n            }\n          });\n        }\n      } catch (err) {\n        console.error(err);\n        dispatch({\n          type: 'INITIALISE',\n          payload: {\n            isAuthenticated: false,\n            user: null\n          }\n        });\n      }\n    };\n\n    initialise();\n  }, []);\n\n  if (!state.isInitialised) {\n    return <SplashScreen />;\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        ...state,\n        method: 'Auth0',\n        loginWithPopup,\n        logout\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}