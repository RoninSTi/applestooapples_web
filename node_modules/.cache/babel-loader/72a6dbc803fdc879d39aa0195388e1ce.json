{"ast":null,"code":"import _regeneratorRuntime from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport jwt from 'jsonwebtoken';\nimport { v4 as uuidv4 } from 'uuid';\nimport mock from 'src/utils/mock';\nimport wait from 'src/utils/wait';\nvar JWT_SECRET = 'devias-top-secret-key';\nvar JWT_EXPIRES_IN = '2 days';\nvar users = [{\n  id: '5e86809283e28b96d2d38537',\n  avatar: '/static/images/avatars/avatar_6.png',\n  canHire: false,\n  country: 'USA',\n  email: 'demo@devias.io',\n  isPublic: true,\n  name: 'Katarina Smith',\n  password: 'Password123',\n  phone: '+40 777666555',\n  role: 'admin',\n  state: 'New York',\n  tier: 'Premium'\n}];\nmock.onPost('/api/account/login').reply( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config) {\n    var _JSON$parse, email, password, user, accessToken;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return wait(1000);\n\n          case 3:\n            _JSON$parse = JSON.parse(config.data), email = _JSON$parse.email, password = _JSON$parse.password;\n            user = users.find(function (_user) {\n              return _user.email === email;\n            });\n\n            if (user) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", [400, {\n              message: 'Please check your email and password'\n            }]);\n\n          case 7:\n            if (!(user.password !== password)) {\n              _context.next = 9;\n              break;\n            }\n\n            return _context.abrupt(\"return\", [400, {\n              message: 'Invalid password'\n            }]);\n\n          case 9:\n            accessToken = jwt.sign({\n              userId: user.id\n            }, JWT_SECRET, {\n              expiresIn: JWT_EXPIRES_IN\n            });\n            return _context.abrupt(\"return\", [200, {\n              accessToken: accessToken,\n              user: {\n                id: user.id,\n                avatar: user.avatar,\n                email: user.email,\n                name: user.name,\n                tier: user.tier\n              }\n            }]);\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n            return _context.abrupt(\"return\", [500, {\n              message: 'Internal server error'\n            }]);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 13]]);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nmock.onPost('/api/account/register').reply( /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(config) {\n    var _JSON$parse2, email, name, password, user, accessToken;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return wait(1000);\n\n          case 3:\n            _JSON$parse2 = JSON.parse(config.data), email = _JSON$parse2.email, name = _JSON$parse2.name, password = _JSON$parse2.password;\n            user = users.find(function (_user) {\n              return _user.email === email;\n            });\n\n            if (!user) {\n              _context2.next = 7;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", [400, {\n              message: 'User already exists'\n            }]);\n\n          case 7:\n            user = {\n              id: uuidv4(),\n              avatar: null,\n              canHire: false,\n              country: null,\n              email: email,\n              isPublic: true,\n              name: name,\n              password: password,\n              phone: null,\n              role: 'admin',\n              state: null,\n              tier: 'Standard'\n            };\n            accessToken = jwt.sign({\n              userId: user.id\n            }, JWT_SECRET, {\n              expiresIn: JWT_EXPIRES_IN\n            });\n            return _context2.abrupt(\"return\", [200, {\n              accessToken: accessToken,\n              user: {\n                id: user.id,\n                avatar: user.avatar,\n                email: user.email,\n                name: user.name,\n                tier: user.tier\n              }\n            }]);\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(_context2.t0);\n            return _context2.abrupt(\"return\", [500, {\n              message: 'Internal server error'\n            }]);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 12]]);\n  }));\n\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nmock.onGet('/api/account/me').reply(function (config) {\n  try {\n    var Authorization = config.headers.Authorization;\n\n    if (!Authorization) {\n      return [401, {\n        message: 'Authorization token missing'\n      }];\n    }\n\n    var accessToken = Authorization.split(' ')[1];\n\n    var _jwt$verify = jwt.verify(accessToken, JWT_SECRET),\n        userId = _jwt$verify.userId;\n\n    var user = users.find(function (_user) {\n      return _user.id === userId;\n    });\n\n    if (!user) {\n      return [401, {\n        message: 'Invalid authorization token'\n      }];\n    }\n\n    return [200, {\n      user: {\n        id: user.id,\n        avatar: user.avatar,\n        email: user.email,\n        name: user.name,\n        tier: user.tier\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});\nmock.onGet('/api/account/settings').reply(200, {\n  settings: {}\n});\nmock.onGet('/api/account/subscription').reply(200, {\n  subscription: {\n    name: 'Premium',\n    price: 29,\n    currency: '$',\n    proposalsLeft: 12,\n    templatesLeft: 5,\n    invitesLeft: 24,\n    adsLeft: 10,\n    hasAnalytics: true,\n    hasEmailAlerts: true\n  }\n});","map":{"version":3,"sources":["/Users/craigcronin/Development/applestooapples_web_template/src/__mocks__/account.js"],"names":["jwt","v4","uuidv4","mock","wait","JWT_SECRET","JWT_EXPIRES_IN","users","id","avatar","canHire","country","email","isPublic","name","password","phone","role","state","tier","onPost","reply","config","JSON","parse","data","user","find","_user","message","accessToken","sign","userId","expiresIn","console","error","onGet","Authorization","headers","split","verify","err","settings","subscription","price","currency","proposalsLeft","templatesLeft","invitesLeft","adsLeft","hasAnalytics","hasEmailAlerts"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AAEA,IAAMC,UAAU,GAAG,uBAAnB;AACA,IAAMC,cAAc,GAAG,QAAvB;AAEA,IAAMC,KAAK,GAAG,CACZ;AACEC,EAAAA,EAAE,EAAE,0BADN;AAEEC,EAAAA,MAAM,EAAE,qCAFV;AAGEC,EAAAA,OAAO,EAAE,KAHX;AAIEC,EAAAA,OAAO,EAAE,KAJX;AAKEC,EAAAA,KAAK,EAAE,gBALT;AAMEC,EAAAA,QAAQ,EAAE,IANZ;AAOEC,EAAAA,IAAI,EAAE,gBAPR;AAQEC,EAAAA,QAAQ,EAAE,aARZ;AASEC,EAAAA,KAAK,EAAE,eATT;AAUEC,EAAAA,IAAI,EAAE,OAVR;AAWEC,EAAAA,KAAK,EAAE,UAXT;AAYEC,EAAAA,IAAI,EAAE;AAZR,CADY,CAAd;AAiBAhB,IAAI,CAACiB,MAAL,CAAY,oBAAZ,EAAkCC,KAAlC;AAAA,sEAAwC,iBAAOC,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE9BlB,IAAI,CAAC,IAAD,CAF0B;;AAAA;AAAA,0BAIRmB,IAAI,CAACC,KAAL,CAAWF,MAAM,CAACG,IAAlB,CAJQ,EAI5Bb,KAJ4B,eAI5BA,KAJ4B,EAIrBG,QAJqB,eAIrBA,QAJqB;AAK9BW,YAAAA,IAL8B,GAKvBnB,KAAK,CAACoB,IAAN,CAAW,UAACC,KAAD;AAAA,qBAAWA,KAAK,CAAChB,KAAN,KAAgBA,KAA3B;AAAA,aAAX,CALuB;;AAAA,gBAO/Bc,IAP+B;AAAA;AAAA;AAAA;;AAAA,6CAQ3B,CAAC,GAAD,EAAM;AAAEG,cAAAA,OAAO,EAAE;AAAX,aAAN,CAR2B;;AAAA;AAAA,kBAWhCH,IAAI,CAACX,QAAL,KAAkBA,QAXc;AAAA;AAAA;AAAA;;AAAA,6CAY3B,CAAC,GAAD,EAAM;AAAEc,cAAAA,OAAO,EAAE;AAAX,aAAN,CAZ2B;;AAAA;AAe9BC,YAAAA,WAf8B,GAehB9B,GAAG,CAAC+B,IAAJ,CAClB;AAAEC,cAAAA,MAAM,EAAEN,IAAI,CAAClB;AAAf,aADkB,EAElBH,UAFkB,EAGlB;AAAE4B,cAAAA,SAAS,EAAE3B;AAAb,aAHkB,CAfgB;AAAA,6CAqB7B,CAAC,GAAD,EAAM;AACXwB,cAAAA,WAAW,EAAXA,WADW;AAEXJ,cAAAA,IAAI,EAAE;AACJlB,gBAAAA,EAAE,EAAEkB,IAAI,CAAClB,EADL;AAEJC,gBAAAA,MAAM,EAAEiB,IAAI,CAACjB,MAFT;AAGJG,gBAAAA,KAAK,EAAEc,IAAI,CAACd,KAHR;AAIJE,gBAAAA,IAAI,EAAEY,IAAI,CAACZ,IAJP;AAKJK,gBAAAA,IAAI,EAAEO,IAAI,CAACP;AALP;AAFK,aAAN,CArB6B;;AAAA;AAAA;AAAA;AAgCpCe,YAAAA,OAAO,CAACC,KAAR;AAhCoC,6CAiC7B,CAAC,GAAD,EAAM;AAAEN,cAAAA,OAAO,EAAE;AAAX,aAAN,CAjC6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxC;;AAAA;AAAA;AAAA;AAAA;AAqCA1B,IAAI,CAACiB,MAAL,CAAY,uBAAZ,EAAqCC,KAArC;AAAA,uEAA2C,kBAAOC,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEjClB,IAAI,CAAC,IAAD,CAF6B;;AAAA;AAAA,2BAILmB,IAAI,CAACC,KAAL,CAAWF,MAAM,CAACG,IAAlB,CAJK,EAI/Bb,KAJ+B,gBAI/BA,KAJ+B,EAIxBE,IAJwB,gBAIxBA,IAJwB,EAIlBC,QAJkB,gBAIlBA,QAJkB;AAKnCW,YAAAA,IALmC,GAK5BnB,KAAK,CAACoB,IAAN,CAAW,UAACC,KAAD;AAAA,qBAAWA,KAAK,CAAChB,KAAN,KAAgBA,KAA3B;AAAA,aAAX,CAL4B;;AAAA,iBAOnCc,IAPmC;AAAA;AAAA;AAAA;;AAAA,8CAQ9B,CAAC,GAAD,EAAM;AAAEG,cAAAA,OAAO,EAAE;AAAX,aAAN,CAR8B;;AAAA;AAWvCH,YAAAA,IAAI,GAAG;AACLlB,cAAAA,EAAE,EAAEN,MAAM,EADL;AAELO,cAAAA,MAAM,EAAE,IAFH;AAGLC,cAAAA,OAAO,EAAE,KAHJ;AAILC,cAAAA,OAAO,EAAE,IAJJ;AAKLC,cAAAA,KAAK,EAALA,KALK;AAMLC,cAAAA,QAAQ,EAAE,IANL;AAOLC,cAAAA,IAAI,EAAJA,IAPK;AAQLC,cAAAA,QAAQ,EAARA,QARK;AASLC,cAAAA,KAAK,EAAE,IATF;AAULC,cAAAA,IAAI,EAAE,OAVD;AAWLC,cAAAA,KAAK,EAAE,IAXF;AAYLC,cAAAA,IAAI,EAAE;AAZD,aAAP;AAeMW,YAAAA,WA1BiC,GA0BnB9B,GAAG,CAAC+B,IAAJ,CAClB;AAAEC,cAAAA,MAAM,EAAEN,IAAI,CAAClB;AAAf,aADkB,EAElBH,UAFkB,EAGlB;AAAE4B,cAAAA,SAAS,EAAE3B;AAAb,aAHkB,CA1BmB;AAAA,8CAgChC,CAAC,GAAD,EAAM;AACXwB,cAAAA,WAAW,EAAXA,WADW;AAEXJ,cAAAA,IAAI,EAAE;AACJlB,gBAAAA,EAAE,EAAEkB,IAAI,CAAClB,EADL;AAEJC,gBAAAA,MAAM,EAAEiB,IAAI,CAACjB,MAFT;AAGJG,gBAAAA,KAAK,EAAEc,IAAI,CAACd,KAHR;AAIJE,gBAAAA,IAAI,EAAEY,IAAI,CAACZ,IAJP;AAKJK,gBAAAA,IAAI,EAAEO,IAAI,CAACP;AALP;AAFK,aAAN,CAhCgC;;AAAA;AAAA;AAAA;AA2CvCe,YAAAA,OAAO,CAACC,KAAR;AA3CuC,8CA4ChC,CAAC,GAAD,EAAM;AAAEN,cAAAA,OAAO,EAAE;AAAX,aAAN,CA5CgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3C;;AAAA;AAAA;AAAA;AAAA;AAgDA1B,IAAI,CAACiC,KAAL,CAAW,iBAAX,EAA8Bf,KAA9B,CAAoC,UAACC,MAAD,EAAY;AAC9C,MAAI;AAAA,QACMe,aADN,GACwBf,MAAM,CAACgB,OAD/B,CACMD,aADN;;AAGF,QAAI,CAACA,aAAL,EAAoB;AAClB,aAAO,CAAC,GAAD,EAAM;AAAER,QAAAA,OAAO,EAAE;AAAX,OAAN,CAAP;AACD;;AAED,QAAMC,WAAW,GAAGO,aAAa,CAACE,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAApB;;AAPE,sBAQiBvC,GAAG,CAACwC,MAAJ,CAAWV,WAAX,EAAwBzB,UAAxB,CARjB;AAAA,QAQM2B,MARN,eAQMA,MARN;;AASF,QAAMN,IAAI,GAAGnB,KAAK,CAACoB,IAAN,CAAW,UAACC,KAAD;AAAA,aAAWA,KAAK,CAACpB,EAAN,KAAawB,MAAxB;AAAA,KAAX,CAAb;;AAEA,QAAI,CAACN,IAAL,EAAW;AACT,aAAO,CAAC,GAAD,EAAM;AAAEG,QAAAA,OAAO,EAAE;AAAX,OAAN,CAAP;AACD;;AAED,WAAO,CAAC,GAAD,EAAM;AACXH,MAAAA,IAAI,EAAE;AACJlB,QAAAA,EAAE,EAAEkB,IAAI,CAAClB,EADL;AAEJC,QAAAA,MAAM,EAAEiB,IAAI,CAACjB,MAFT;AAGJG,QAAAA,KAAK,EAAEc,IAAI,CAACd,KAHR;AAIJE,QAAAA,IAAI,EAAEY,IAAI,CAACZ,IAJP;AAKJK,QAAAA,IAAI,EAAEO,IAAI,CAACP;AALP;AADK,KAAN,CAAP;AASD,GAxBD,CAwBE,OAAOsB,GAAP,EAAY;AACZP,IAAAA,OAAO,CAACC,KAAR,CAAcM,GAAd;AACA,WAAO,CAAC,GAAD,EAAM;AAAEZ,MAAAA,OAAO,EAAE;AAAX,KAAN,CAAP;AACD;AACF,CA7BD;AA+BA1B,IAAI,CAACiC,KAAL,CAAW,uBAAX,EAAoCf,KAApC,CAA0C,GAA1C,EAA+C;AAC7CqB,EAAAA,QAAQ,EAAE;AADmC,CAA/C;AAIAvC,IAAI,CAACiC,KAAL,CAAW,2BAAX,EAAwCf,KAAxC,CAA8C,GAA9C,EAAmD;AACjDsB,EAAAA,YAAY,EAAE;AACZ7B,IAAAA,IAAI,EAAE,SADM;AAEZ8B,IAAAA,KAAK,EAAE,EAFK;AAGZC,IAAAA,QAAQ,EAAE,GAHE;AAIZC,IAAAA,aAAa,EAAE,EAJH;AAKZC,IAAAA,aAAa,EAAE,CALH;AAMZC,IAAAA,WAAW,EAAE,EAND;AAOZC,IAAAA,OAAO,EAAE,EAPG;AAQZC,IAAAA,YAAY,EAAE,IARF;AASZC,IAAAA,cAAc,EAAE;AATJ;AADmC,CAAnD","sourcesContent":["import jwt from 'jsonwebtoken';\nimport { v4 as uuidv4 } from 'uuid';\nimport mock from 'src/utils/mock';\nimport wait from 'src/utils/wait';\n\nconst JWT_SECRET = 'devias-top-secret-key';\nconst JWT_EXPIRES_IN = '2 days';\n\nconst users = [\n  {\n    id: '5e86809283e28b96d2d38537',\n    avatar: '/static/images/avatars/avatar_6.png',\n    canHire: false,\n    country: 'USA',\n    email: 'demo@devias.io',\n    isPublic: true,\n    name: 'Katarina Smith',\n    password: 'Password123',\n    phone: '+40 777666555',\n    role: 'admin',\n    state: 'New York',\n    tier: 'Premium'\n  }\n];\n\nmock.onPost('/api/account/login').reply(async (config) => {\n  try {\n    await wait(1000);\n\n    const { email, password } = JSON.parse(config.data);\n    const user = users.find((_user) => _user.email === email);\n\n    if (!user) {\n      return [400, { message: 'Please check your email and password' }];\n    }\n\n    if (user.password !== password) {\n      return [400, { message: 'Invalid password' }];\n    }\n\n    const accessToken = jwt.sign(\n      { userId: user.id },\n      JWT_SECRET,\n      { expiresIn: JWT_EXPIRES_IN }\n    );\n\n    return [200, {\n      accessToken,\n      user: {\n        id: user.id,\n        avatar: user.avatar,\n        email: user.email,\n        name: user.name,\n        tier: user.tier\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, { message: 'Internal server error' }];\n  }\n});\n\nmock.onPost('/api/account/register').reply(async (config) => {\n  try {\n    await wait(1000);\n\n    const { email, name, password } = JSON.parse(config.data);\n    let user = users.find((_user) => _user.email === email);\n\n    if (user) {\n      return [400, { message: 'User already exists' }];\n    }\n\n    user = {\n      id: uuidv4(),\n      avatar: null,\n      canHire: false,\n      country: null,\n      email,\n      isPublic: true,\n      name,\n      password,\n      phone: null,\n      role: 'admin',\n      state: null,\n      tier: 'Standard'\n    };\n\n    const accessToken = jwt.sign(\n      { userId: user.id },\n      JWT_SECRET,\n      { expiresIn: JWT_EXPIRES_IN }\n    );\n\n    return [200, {\n      accessToken,\n      user: {\n        id: user.id,\n        avatar: user.avatar,\n        email: user.email,\n        name: user.name,\n        tier: user.tier\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, { message: 'Internal server error' }];\n  }\n});\n\nmock.onGet('/api/account/me').reply((config) => {\n  try {\n    const { Authorization } = config.headers;\n\n    if (!Authorization) {\n      return [401, { message: 'Authorization token missing' }];\n    }\n  \n    const accessToken = Authorization.split(' ')[1];\n    const { userId } = jwt.verify(accessToken, JWT_SECRET);  \n    const user = users.find((_user) => _user.id === userId);\n\n    if (!user) {\n      return [401, { message: 'Invalid authorization token' }];\n    }\n\n    return [200, {\n      user: {\n        id: user.id,\n        avatar: user.avatar,\n        email: user.email,\n        name: user.name,\n        tier: user.tier\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, { message: 'Internal server error' }];\n  }\n});\n\nmock.onGet('/api/account/settings').reply(200, {\n  settings: {}\n});\n\nmock.onGet('/api/account/subscription').reply(200, {\n  subscription: {\n    name: 'Premium',\n    price: 29,\n    currency: '$',\n    proposalsLeft: 12,\n    templatesLeft: 5,\n    invitesLeft: 24,\n    adsLeft: 10,\n    hasAnalytics: true,\n    hasEmailAlerts: true\n  }\n});\n"]},"metadata":{},"sourceType":"module"}