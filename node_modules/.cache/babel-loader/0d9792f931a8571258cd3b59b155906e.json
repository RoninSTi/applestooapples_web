{"ast":null,"code":"import _toConsumableArray from \"/Users/craigcronin/Development/applestooapples_web_template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { v4 as uuidv4 } from 'uuid';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport mock from 'src/utils/mock';\nvar contacts = [{\n  id: '5e8891ab188cd2855e6029b7',\n  avatar: '/static/images/avatars/avatar_1.png',\n  isActive: true,\n  lastActivity: moment().toDate().getTime(),\n  name: 'Cooper Murray',\n  username: 'cooper.murray'\n}, {\n  id: '5e887a62195cc5aef7e8ca5d',\n  avatar: '/static/images/avatars/avatar_2.png',\n  isActive: false,\n  lastActivity: moment().subtract(2, 'hours').toDate().getTime(),\n  name: 'Ekaterina Tankova',\n  username: 'ekaterina.tankova'\n}, {\n  id: '5e887ac47eed253091be10cb',\n  avatar: '/static/images/avatars/avatar_3.png',\n  isActive: false,\n  lastActivity: moment().subtract(15, 'minutes').toDate().getTime(),\n  name: 'Cao Yu',\n  username: 'cao.yu'\n}, {\n  id: '5e887b209c28ac3dd97f6db5',\n  avatar: '/static/images/avatars/avatar_4.png',\n  isActive: true,\n  lastActivity: moment().toDate().getTime(),\n  name: 'Alex Richardson',\n  username: 'alex.richardson'\n}, {\n  id: '5e887b7602bdbc4dbb234b27',\n  avatar: '/static/images/avatars/avatar_5.png',\n  isActive: true,\n  lastActivity: moment().toDate().getTime(),\n  name: 'Anje Keizer',\n  username: 'anje.keizer'\n}, {\n  id: '5e86805e2bafd54f66cc95c3',\n  avatar: '/static/images/avatars/avatar_7.png',\n  isActive: false,\n  lastActivity: moment().subtract(2, 'days').toDate().getTime(),\n  name: 'Adam Denisov',\n  username: 'adam.denisov'\n}, {\n  id: '5e887a1fbefd7938eea9c981',\n  avatar: '/static/images/avatars/avatar_8.png',\n  isActive: false,\n  lastActivity: moment().subtract(6, 'hours').toDate().getTime(),\n  name: 'Miller Edwards',\n  username: 'miller.edwards'\n}, {\n  id: '5e887d0b3d090c1b8f162003',\n  avatar: '/static/images/avatars/avatar_9.png',\n  isActive: true,\n  lastActivity: moment().toDate().getTime(),\n  name: 'Emilee Simchenko',\n  username: 'emilee.simchenko'\n}, {\n  id: '5e88792be2d4cfb4bf0971d9',\n  avatar: '/static/images/avatars/avatar_10.png',\n  isActive: true,\n  lastActivity: moment().toDate().getTime(),\n  name: 'Elliott Stone',\n  username: 'elliott.stone'\n}, {\n  id: '5e8877da9a65442b11551975',\n  avatar: '/static/images/avatars/avatar_11.png',\n  isActive: true,\n  lastActivity: moment().toDate().getTime(),\n  name: 'Shen Zhi',\n  username: 'shen.zhi'\n}, {\n  id: '5e8680e60cba5019c5ca6fda',\n  avatar: '/static/images/avatars/avatar_12.png',\n  isActive: true,\n  lastActivity: moment().toDate().getTime(),\n  name: 'Merrile Burgett',\n  username: 'merrile.burgett'\n}];\nvar threads = [{\n  id: '5e867eb9de721aecaccf4f7b',\n  messages: [{\n    id: '5e867f0a5bc0ff2bfa07bfa6',\n    attachments: [],\n    body: 'Hey, nice projects! I really liked the one in react. What\\'s your quote on kinda similar project?',\n    contentType: 'text',\n    createdAt: moment().subtract(10, 'hours').toDate().getTime(),\n    senderId: '5e86805e2bafd54f66cc95c3'\n  }, {\n    id: '5e867f167d5f78109ae9f2a4',\n    attachments: [],\n    body: 'I would need to know more details, but my hourly rate stats at $35/hour. Thanks!',\n    contentType: 'text',\n    createdAt: moment().subtract(2, 'hours').toDate().getTime(),\n    senderId: '5e86809283e28b96d2d38537'\n  }, {\n    id: '5e867f1c9ca72084693528f4',\n    attachments: [],\n    body: 'Well it\\'s a really easy one, I\\'m sure we can make it half of the price.',\n    contentType: 'text',\n    createdAt: moment().subtract(5, 'minutes').toDate().getTime(),\n    senderId: '5e86805e2bafd54f66cc95c3'\n  }, {\n    id: '5e867f22fd2e27a09849b4db',\n    attachments: [],\n    body: 'Then why don\\'t you make it if it\\'s that easy? Sorry I\\'m not interetes, have fantastic day Adam!',\n    contentType: 'text',\n    createdAt: moment().subtract(3, 'minutes').toDate().getTime(),\n    senderId: '5e86809283e28b96d2d38537'\n  }, {\n    id: '5e867f28a34d45ac6eb5c41f',\n    attachments: [],\n    body: 'Last offer, $25 per hour',\n    contentType: 'text',\n    createdAt: moment().subtract(1, 'minute').toDate().getTime(),\n    senderId: '5e86805e2bafd54f66cc95c3'\n  }, {\n    id: '5e867f2dba984a3f78b33526',\n    attachments: [],\n    body: '/static/images/projects/project_4.png',\n    contentType: 'image',\n    createdAt: moment().subtract(1, 'minute').toDate().getTime(),\n    senderId: '5e86805e2bafd54f66cc95c3'\n  }],\n  participants: [{\n    id: '5e86809283e28b96d2d38537',\n    avatar: '/static/images/avatars/avatar_6.png',\n    name: 'Katarina Smith',\n    username: 'katarina.smith'\n  }, {\n    id: '5e86805e2bafd54f66cc95c3',\n    avatar: '/static/images/avatars/avatar_7.png',\n    name: 'Adam Denisov',\n    username: 'adam.denisov'\n  }],\n  type: 'ONE_TO_ONE',\n  unreadCount: 2\n}, {\n  id: '5e867fa7082c3c5921403a26',\n  messages: [{\n    id: '5e867fc180837d901bd9bca1',\n    attachments: [],\n    body: 'Hey, would you like to collaborate?',\n    contentType: 'text',\n    createdAt: moment().subtract(6, 'minutes').toDate().getTime(),\n    senderId: '5e8680e60cba5019c5ca6fda'\n  }, {\n    id: '5e8d6fb695df7971237fc173',\n    attachments: [],\n    body: 'Hi, Merrile!',\n    contentType: 'text',\n    createdAt: moment().subtract(5, 'minutes').toDate().getTime(),\n    senderId: '5e86809283e28b96d2d38537'\n  }, {\n    id: '58825a290eb4d4271a54f188',\n    attachments: [],\n    body: 'Hello everyone ðŸ˜€',\n    contentType: 'text',\n    createdAt: moment().subtract(2, 'minutes').toDate().getTime(),\n    senderId: '5e8891ab188cd2855e6029b7'\n  }],\n  participants: [{\n    id: '5e86809283e28b96d2d38537',\n    avatar: '/static/images/avatars/avatar_6.png',\n    name: 'Katarina Smith',\n    username: 'katarina.smith'\n  }, {\n    id: '5e8680e60cba5019c5ca6fda',\n    avatar: '/static/images/avatars/avatar_12.png',\n    name: 'Merrile Burgett',\n    username: 'merrile.burgett'\n  }, {\n    id: '5e8891ab188cd2855e6029b7',\n    avatar: '/static/images/avatars/avatar_1.png',\n    name: 'Cooper Murray',\n    username: 'cooper.murray'\n  }],\n  type: 'GROUP',\n  unreadCount: 0\n}];\n\nvar findContactByUsername = function findContactByUsername(username) {\n  var contact = contacts.find(function (_contact) {\n    return _contact.username === username;\n  });\n  return contact || null;\n};\n\nvar findThreadById = function findThreadById(threadId) {\n  var thread = threads.find(function (_threadId) {\n    return _threadId.id === threadId;\n  });\n  return thread || null;\n}; // This means that we are looking for ONE_TO_ONE thread\n\n\nvar findThreadByOtherParticipantId = function findThreadByOtherParticipantId(participantId) {\n  var thread = threads.find(function (_thread) {\n    if (_thread.type !== 'ONE_TO_ONE') {\n      return false;\n    }\n\n    var participant = _thread.participants.find(function (_participant) {\n      return _participant.id === participantId;\n    });\n\n    return !!participant;\n  });\n  return thread || null;\n};\n\nvar findThreadByParticipantIds = function findThreadByParticipantIds(participantIds) {\n  var thread = threads.find(function (_thread) {\n    if (_thread.participants.length < participantIds.length) {\n      return false;\n    }\n\n    var _participantIds = [];\n\n    _thread.participants.forEach(function (_participant) {\n      _participantIds.push(_participant.id);\n    });\n\n    return _.isEmpty(_.xor(participantIds, _participantIds));\n  });\n  return thread || null;\n};\n\nmock.onGet('/api/chat/contacts').reply(200, {\n  contacts: contacts\n});\nmock.onGet('/api/chat/search').reply(function (config) {\n  try {\n    var query = config.params.query;\n    var cleanQuery = query.toLowerCase().trim();\n    var results = [];\n    contacts.forEach(function (contact) {\n      if (!query) {\n        return results.push(contact);\n      }\n\n      if (contact.name.toLowerCase().includes(cleanQuery)) {\n        return results.push(contact);\n      }\n    });\n    return [200, {\n      results: results\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});\nmock.onGet('/api/chat/participants').reply(function (config) {\n  try {\n    var threadKey = config.params.threadKey;\n    var participants = []; // Thread key might be an ID if thread type is GROUP\n    // otherwise it represents an username\n\n    var thread = findThreadById(threadKey);\n\n    if (thread) {\n      participants.push.apply(participants, _toConsumableArray(thread.participants));\n    } else {\n      var contact = findContactByUsername(threadKey);\n\n      if (contact) {\n        participants.push({\n          id: contact.id,\n          avatar: contact.avatar,\n          name: contact.name,\n          username: contact.username\n        });\n      }\n    }\n\n    return [200, {\n      participants: participants\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});\nmock.onGet('/api/chat/threads').reply(200, {\n  threads: threads\n});\nmock.onGet('/api/chat/thread').reply(function (config) {\n  try {\n    var threadKey = config.params.threadKey; // Thread key might be an ID if thread type is GROUP\n    // otherwise it represents an username\n\n    var thread = findThreadById(threadKey);\n\n    if (thread) {\n      return [200, {\n        thread: thread\n      }];\n    } else {\n      // At this point, thread key should represent an existing contact\n      // If no contact found, the user is trying a shady route\n      // If contact exists, user might want to start a new conversation\n      var contact = findContactByUsername(threadKey);\n\n      if (!contact) {\n        return [404, {\n          message: 'Unable to find the contact'\n        }];\n      } // This could return a null if no thread found\n\n\n      var _thread2 = findThreadByOtherParticipantId(contact.id);\n\n      return [200, {\n        thread: _thread2\n      }];\n    }\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});\nmock.onGet('/api/chat/thread/mark-as-seen').reply(function (config) {\n  try {\n    var threadId = config.params.threadId;\n    var thread = threads.find(function (_thread) {\n      return _thread.id === threadId;\n    });\n\n    if (thread) {\n      thread.unreadCount = 0;\n    }\n\n    return [200, true];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n}); // Adding a new message to a thread can by done in 3 ways\n// 1) By specifying a thread id, this means that the thread already exists\n// 2) By specifying the other user id (if ONE_TO_ONE thread), thread might exist\n// 3) By specifying a list of receipients, thread might exist\n\nmock.onPost('/api/chat/messages/new').reply(function (request) {\n  try {\n    var _JSON$parse = JSON.parse(request.data),\n        threadId = _JSON$parse.threadId,\n        recipientIds = _JSON$parse.recipientIds,\n        body = _JSON$parse.body; // On server get current user from request\n\n\n    var user = {\n      id: '5e86809283e28b96d2d38537',\n      avatar: '/static/images/avatars/avatar_6.png',\n      name: 'Katarina Smith',\n      username: 'katarina.smith'\n    };\n    var thread = null;\n\n    if (threadId) {\n      thread = findThreadById(threadId);\n\n      if (!thread) {\n        return [400, {\n          message: 'Invalid thread id'\n        }];\n      }\n    }\n\n    if (recipientIds) {\n      var participantIds = [].concat(_toConsumableArray(recipientIds), [user.id]);\n      thread = findThreadByParticipantIds(participantIds);\n    }\n\n    var message = {\n      id: uuidv4(),\n      attachments: [],\n      body: body,\n      contentType: 'text',\n      createdAt: moment().toDate().getTime(),\n      senderId: user.id\n    };\n\n    if (thread) {\n      thread.messages = [].concat(_toConsumableArray(thread.messages), [message]);\n    } else {\n      var participants = [user];\n      recipientIds.forEach(function (recipientId) {\n        var contact = contacts.find(function (_contact) {\n          return _contact.id === recipientId;\n        });\n\n        if (!contact) {\n          throw new Error('Contact not found');\n        }\n\n        participants.push({\n          id: contact.id,\n          avatar: contact.avatar,\n          name: contact.name,\n          username: contact.username\n        });\n      });\n      thread = {\n        id: uuidv4(),\n        messages: [message],\n        participants: participants,\n        type: participants.length === 2 ? 'ONE_TO_ONE' : 'GROUP',\n        unreadCount: 0\n      };\n    }\n\n    var responseData = {\n      threadId: thread.id,\n      message: message\n    };\n    return [200, responseData];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});","map":{"version":3,"sources":["/Users/craigcronin/Development/applestooapples_web_template/src/__mocks__/chat.js"],"names":["v4","uuidv4","moment","_","mock","contacts","id","avatar","isActive","lastActivity","toDate","getTime","name","username","subtract","threads","messages","attachments","body","contentType","createdAt","senderId","participants","type","unreadCount","findContactByUsername","contact","find","_contact","findThreadById","threadId","thread","_threadId","findThreadByOtherParticipantId","participantId","_thread","participant","_participant","findThreadByParticipantIds","participantIds","length","_participantIds","forEach","push","isEmpty","xor","onGet","reply","config","query","params","cleanQuery","toLowerCase","trim","results","includes","err","console","error","message","threadKey","onPost","request","JSON","parse","data","recipientIds","user","recipientId","Error","responseData"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport mock from 'src/utils/mock';\n\nlet contacts = [\n  {\n    id: '5e8891ab188cd2855e6029b7',\n    avatar: '/static/images/avatars/avatar_1.png',\n    isActive: true,\n    lastActivity: moment()\n      .toDate()\n      .getTime(),\n    name: 'Cooper Murray',\n    username: 'cooper.murray'\n  },\n  {\n    id: '5e887a62195cc5aef7e8ca5d',\n    avatar: '/static/images/avatars/avatar_2.png',\n    isActive: false,\n    lastActivity: moment()\n      .subtract(2, 'hours')\n      .toDate()\n      .getTime(),\n    name: 'Ekaterina Tankova',\n    username: 'ekaterina.tankova'\n  },\n  {\n    id: '5e887ac47eed253091be10cb',\n    avatar: '/static/images/avatars/avatar_3.png',\n    isActive: false,\n    lastActivity: moment()\n      .subtract(15, 'minutes')\n      .toDate()\n      .getTime(),\n    name: 'Cao Yu',\n    username: 'cao.yu'\n  },\n  {\n    id: '5e887b209c28ac3dd97f6db5',\n    avatar: '/static/images/avatars/avatar_4.png',\n    isActive: true,\n    lastActivity: moment()\n      .toDate()\n      .getTime(),\n    name: 'Alex Richardson',\n    username: 'alex.richardson'\n  },\n  {\n    id: '5e887b7602bdbc4dbb234b27',\n    avatar: '/static/images/avatars/avatar_5.png',\n    isActive: true,\n    lastActivity: moment()\n      .toDate()\n      .getTime(),\n    name: 'Anje Keizer',\n    username: 'anje.keizer'\n  },\n  {\n    id: '5e86805e2bafd54f66cc95c3',\n    avatar: '/static/images/avatars/avatar_7.png',\n    isActive: false,\n    lastActivity: moment()\n      .subtract(2, 'days')\n      .toDate()\n      .getTime(),\n    name: 'Adam Denisov',\n    username: 'adam.denisov'\n  },\n  {\n    id: '5e887a1fbefd7938eea9c981',\n    avatar: '/static/images/avatars/avatar_8.png',\n    isActive: false,\n    lastActivity: moment()\n      .subtract(6, 'hours')\n      .toDate()\n      .getTime(),\n    name: 'Miller Edwards',\n    username: 'miller.edwards'\n  },\n  {\n    id: '5e887d0b3d090c1b8f162003',\n    avatar: '/static/images/avatars/avatar_9.png',\n    isActive: true,\n    lastActivity: moment()\n      .toDate()\n      .getTime(),\n    name: 'Emilee Simchenko',\n    username: 'emilee.simchenko',\n  },\n  {\n    id: '5e88792be2d4cfb4bf0971d9',\n    avatar: '/static/images/avatars/avatar_10.png',\n    isActive: true,\n    lastActivity: moment()\n      .toDate()\n      .getTime(),\n    name: 'Elliott Stone',\n    username: 'elliott.stone'\n  },\n  {\n    id: '5e8877da9a65442b11551975',\n    avatar: '/static/images/avatars/avatar_11.png',\n    isActive: true,\n    lastActivity: moment()\n      .toDate()\n      .getTime(),\n    name: 'Shen Zhi',\n    username: 'shen.zhi'\n  },\n  {\n    id: '5e8680e60cba5019c5ca6fda',\n    avatar: '/static/images/avatars/avatar_12.png',\n    isActive: true,\n    lastActivity: moment()\n      .toDate()\n      .getTime(),\n    name: 'Merrile Burgett',\n    username: 'merrile.burgett'\n  }\n];\n\nlet threads = [\n  {\n    id: '5e867eb9de721aecaccf4f7b',\n    messages: [\n      {\n        id: '5e867f0a5bc0ff2bfa07bfa6',\n        attachments: [],\n        body: 'Hey, nice projects! I really liked the one in react. What\\'s your quote on kinda similar project?',\n        contentType: 'text',\n        createdAt: moment()\n          .subtract(10, 'hours')\n          .toDate()\n          .getTime(),\n        senderId: '5e86805e2bafd54f66cc95c3'\n      },\n      {\n        id: '5e867f167d5f78109ae9f2a4',\n        attachments: [],\n        body: 'I would need to know more details, but my hourly rate stats at $35/hour. Thanks!',\n        contentType: 'text',\n        createdAt: moment()\n          .subtract(2, 'hours')\n          .toDate()\n          .getTime(),\n        senderId: '5e86809283e28b96d2d38537'\n      },\n      {\n        id: '5e867f1c9ca72084693528f4',\n        attachments: [],\n        body: 'Well it\\'s a really easy one, I\\'m sure we can make it half of the price.',\n        contentType: 'text',\n        createdAt: moment()\n          .subtract(5, 'minutes')\n          .toDate()\n          .getTime(),\n        senderId: '5e86805e2bafd54f66cc95c3'\n      },\n      {\n        id: '5e867f22fd2e27a09849b4db',\n        attachments: [],\n        body: 'Then why don\\'t you make it if it\\'s that easy? Sorry I\\'m not interetes, have fantastic day Adam!',\n        contentType: 'text',\n        createdAt: moment()\n          .subtract(3, 'minutes')\n          .toDate()\n          .getTime(),\n        senderId: '5e86809283e28b96d2d38537'\n      },\n      {\n        id: '5e867f28a34d45ac6eb5c41f',\n        attachments: [],\n        body: 'Last offer, $25 per hour',\n        contentType: 'text',\n        createdAt: moment()\n          .subtract(1, 'minute')\n          .toDate()\n          .getTime(),\n        senderId: '5e86805e2bafd54f66cc95c3'\n      },\n      {\n        id: '5e867f2dba984a3f78b33526',\n        attachments: [],\n        body: '/static/images/projects/project_4.png',\n        contentType: 'image',\n        createdAt: moment()\n          .subtract(1, 'minute')\n          .toDate()\n          .getTime(),\n        senderId: '5e86805e2bafd54f66cc95c3'\n      }\n    ],\n    participants: [\n      {\n        id: '5e86809283e28b96d2d38537',\n        avatar: '/static/images/avatars/avatar_6.png',\n        name: 'Katarina Smith',\n        username: 'katarina.smith'\n      },\n      {\n        id: '5e86805e2bafd54f66cc95c3',\n        avatar: '/static/images/avatars/avatar_7.png',\n        name: 'Adam Denisov',\n        username: 'adam.denisov'\n      }\n    ],\n    type: 'ONE_TO_ONE',\n    unreadCount: 2\n  },\n  {\n    id: '5e867fa7082c3c5921403a26',\n    messages: [\n      {\n        id: '5e867fc180837d901bd9bca1',\n        attachments: [],\n        body: 'Hey, would you like to collaborate?',\n        contentType: 'text',\n        createdAt: moment()\n          .subtract(6, 'minutes')\n          .toDate()\n          .getTime(),\n        senderId: '5e8680e60cba5019c5ca6fda'\n      },\n      {\n        id: '5e8d6fb695df7971237fc173',\n        attachments: [],\n        body: 'Hi, Merrile!',\n        contentType: 'text',\n        createdAt: moment()\n          .subtract(5, 'minutes')\n          .toDate()\n          .getTime(),\n        senderId: '5e86809283e28b96d2d38537'\n      },\n      {\n        id: '58825a290eb4d4271a54f188',\n        attachments: [],\n        body: 'Hello everyone ðŸ˜€',\n        contentType: 'text',\n        createdAt: moment()\n          .subtract(2, 'minutes')\n          .toDate()\n          .getTime(),\n        senderId: '5e8891ab188cd2855e6029b7'\n      }\n    ],\n    participants: [\n      {\n        id: '5e86809283e28b96d2d38537',\n        avatar: '/static/images/avatars/avatar_6.png',\n        name: 'Katarina Smith',\n        username: 'katarina.smith'\n      },\n      {\n        id: '5e8680e60cba5019c5ca6fda',\n        avatar: '/static/images/avatars/avatar_12.png',\n        name: 'Merrile Burgett',\n        username: 'merrile.burgett'\n      },\n      {\n        id: '5e8891ab188cd2855e6029b7',\n        avatar: '/static/images/avatars/avatar_1.png',\n        name: 'Cooper Murray',\n        username: 'cooper.murray'\n      }\n    ],\n    type: 'GROUP',\n    unreadCount: 0\n  }\n];\n\nconst findContactByUsername = (username) => {\n  const contact = contacts.find((_contact) => _contact.username === username);\n\n  return contact || null;\n};\n\nconst findThreadById = (threadId) => {\n  const thread = threads.find((_threadId) => _threadId.id === threadId);\n\n  return thread || null;\n};\n\n// This means that we are looking for ONE_TO_ONE thread\nconst findThreadByOtherParticipantId = (participantId) => {\n  const thread = threads.find((_thread) => {\n    if (_thread.type !== 'ONE_TO_ONE') {\n      return false;\n    }\n\n    const participant = _thread.participants.find((_participant) => _participant.id === participantId);\n\n    return !!participant;\n  });\n\n  return thread || null;\n};\n\nconst findThreadByParticipantIds = (participantIds) => {\n  const thread = threads.find((_thread) => {\n    if (_thread.participants.length < participantIds.length) {\n      return false;\n    }\n\n    let _participantIds = [];\n\n    _thread.participants.forEach((_participant) => {\n      _participantIds.push(_participant.id);\n    });\n\n    return _.isEmpty(_.xor(participantIds, _participantIds));\n  });\n\n  return thread || null;\n};\n\nmock.onGet('/api/chat/contacts').reply(200, { contacts });\n\nmock.onGet('/api/chat/search').reply((config) => {\n  try {\n    const { query } = config.params;\n    const cleanQuery = query.toLowerCase().trim();\n    const results = [];\n\n    contacts.forEach((contact) => {\n      if (!query) {\n        return results.push(contact);\n      }\n\n      if (contact.name.toLowerCase().includes(cleanQuery)) {\n        return results.push(contact);\n      }\n    });\n\n    return [200, { results }];\n  } catch (err) {\n    console.error(err);\n    return [500, { message: 'Internal server error' }];\n  }\n});\n\nmock.onGet('/api/chat/participants').reply((config) => {\n  try {\n    const { threadKey } = config.params;\n    const participants = [];\n\n    // Thread key might be an ID if thread type is GROUP\n    // otherwise it represents an username\n    const thread = findThreadById(threadKey);\n\n    if (thread) {\n      participants.push(...thread.participants);\n    } else {\n      const contact = findContactByUsername(threadKey);\n\n      if (contact) {\n        participants.push({\n          id: contact.id,\n          avatar: contact.avatar,\n          name: contact.name,\n          username: contact.username\n        });\n      }\n    }\n\n    return [200, { participants }];\n  } catch (err) {\n    console.error(err);\n    return [500, { message: 'Internal server error' }];\n  }\n});\n\nmock.onGet('/api/chat/threads').reply(200, { threads });\n\nmock.onGet('/api/chat/thread').reply((config) => {\n  try {\n    const { threadKey } = config.params;\n    \n    // Thread key might be an ID if thread type is GROUP\n    // otherwise it represents an username\n    const thread = findThreadById(threadKey);\n\n    if (thread) {\n      return [200, { thread }];\n    } else {\n      // At this point, thread key should represent an existing contact\n      // If no contact found, the user is trying a shady route\n      // If contact exists, user might want to start a new conversation\n      const contact = findContactByUsername(threadKey);\n\n      if (!contact) {\n        return [404, { message: 'Unable to find the contact' }];\n      }\n\n      // This could return a null if no thread found\n      const thread = findThreadByOtherParticipantId(contact.id);\n\n      return [200, { thread }];\n    }\n  } catch (err) {\n    console.error(err);\n    return [500, { message: 'Internal server error' }];\n  }\n});\n\nmock.onGet('/api/chat/thread/mark-as-seen').reply((config) => {\n  try {\n    const { threadId } = config.params;\n    const thread = threads.find((_thread) => _thread.id === threadId);\n\n    if (thread) {\n      thread.unreadCount = 0;\n    }\n\n    return [200, true];\n  } catch (err) {\n    console.error(err);\n    return [500, { message: 'Internal server error' }];\n  }\n});\n\n// Adding a new message to a thread can by done in 3 ways\n// 1) By specifying a thread id, this means that the thread already exists\n// 2) By specifying the other user id (if ONE_TO_ONE thread), thread might exist\n// 3) By specifying a list of receipients, thread might exist\nmock.onPost('/api/chat/messages/new').reply((request) => {\n  try {\n    const { threadId, recipientIds, body } = JSON.parse(request.data);\n\n    // On server get current user from request\n    const user = {\n      id: '5e86809283e28b96d2d38537',\n      avatar: '/static/images/avatars/avatar_6.png',\n      name: 'Katarina Smith',\n      username: 'katarina.smith'\n    };\n\n    let thread = null;\n\n    if (threadId) {\n      thread = findThreadById(threadId);\n\n      if (!thread) {\n        return [400, { message: 'Invalid thread id' }];\n      }\n    }\n\n    if (recipientIds) {\n      const participantIds = [...recipientIds, user.id];\n\n      thread = findThreadByParticipantIds(participantIds);\n    }\n\n    const message = {\n      id: uuidv4(),\n      attachments: [],\n      body,\n      contentType: 'text',\n      createdAt: moment()\n        .toDate()\n        .getTime(),\n      senderId: user.id\n    };\n\n    if (thread) {\n      thread.messages = [...thread.messages, message];\n    } else {\n      const participants = [user];\n\n      recipientIds.forEach((recipientId) => {\n        const contact = contacts.find((_contact) => _contact.id === recipientId);\n\n        if (!contact) {\n          throw new Error('Contact not found');\n        }\n\n        participants.push({\n          id: contact.id,\n          avatar: contact.avatar,\n          name: contact.name,\n          username: contact.username\n        });\n      });\n\n      thread = {\n        id: uuidv4(),\n        messages: [message],\n        participants,\n        type: participants.length === 2 ? 'ONE_TO_ONE' : 'GROUP',\n        unreadCount: 0\n      };\n    }\n\n    const responseData = {\n      threadId: thread.id,\n      message\n    };\n\n    return [200, responseData];\n  } catch (err) {\n    console.error(err);\n    return [500, { message: 'Internal server error' }];\n  }\n});\n"]},"metadata":{},"sourceType":"module"}